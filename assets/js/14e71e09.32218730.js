(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{400:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=o.a.createContext({}),u=function(e){var t=o.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(c,".").concat(m)]||p[m]||s[m]||a;return n?o.a.createElement(b,l(l({ref:t},d),{},{components:n})):o.a.createElement(b,l({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var d=2;d<a;d++)c[d]=n[d];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),a=(n(0),n(400)),c=["components"],l={custom_edit_url:null,id:"03-detect_wall",title:"detect_wall()"},i={unversionedId:"codrone-edu/python/Flight-Commands-Movement/03-detect_wall",id:"codrone-edu/python/Flight-Commands-Movement/03-detect_wall",isDocsHomePage:!1,title:"detect_wall()",description:"Description",source:"@site/docs/codrone-edu/python/03-Flight-Commands-Movement/03-detect_wall.md",sourceDirName:"codrone-edu/python/03-Flight-Commands-Movement",slug:"/codrone-edu/python/Flight-Commands-Movement/03-detect_wall",permalink:"/doc-v2/docs/codrone-edu/python/Flight-Commands-Movement/03-detect_wall",editUrl:null,version:"current",sidebarPosition:3,frontMatter:{custom_edit_url:null,id:"03-detect_wall",title:"detect_wall()"},sidebar:"codroneEduSideBar",previous:{title:"circle()",permalink:"/doc-v2/docs/codrone-edu/python/Flight-Commands-Movement/02-circle"},next:{title:"flip()",permalink:"/doc-v2/docs/codrone-edu/python/Flight-Commands-Movement/04-flip"}},d=[],u={toc:d};function p(e){var t=e.components,n=Object(o.a)(e,c);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h5",{id:"description"},"Description"),Object(a.b)("p",null,"Returns True when a distance below the threshold is reached. The range of front sensor is from 0mm-1000mm (0cm-100cm)"),Object(a.b)("h5",{id:"syntax"},"Syntax"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"detect_wall()"),"\n",Object(a.b)("inlineCode",{parentName:"p"},"detect_wall(distance)")),Object(a.b)("h5",{id:"parameters"},"Parameters"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"distance"),": An optional parameter that is the threshold in millimeters that will return True. The default value is 500"),Object(a.b)("h5",{id:"returns"},"Returns"),Object(a.b)("p",null,"None"),Object(a.b)("h5",{id:"example-code"},"Example Code"),Object(a.b)("h6",{id:"python"},"Python"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'#Python code\nfrom codrone_edu.drone import *\n\ndrone = Drone()\ndrone.pair()\ndrone.takeoff()\n# if a wall is detected in less than 500mm true will be returned.\nif drone.detect_wall():\n    print("wall detected!")\nelse:\n    print("no wall detected!")\n\ndrone.land()\ndrone.close()\n')))}p.isMDXComponent=!0}}]);