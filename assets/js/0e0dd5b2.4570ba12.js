(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{499:function(e,r,n){"use strict";n.d(r,"a",(function(){return s})),n.d(r,"b",(function(){return m}));var t=n(0),o=n.n(t);function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){l(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),d=function(e){var r=o.a.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},s=function(e){var r=d(e.components);return o.a.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},b=o.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,l=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=d(n),b=t,m=s["".concat(c,".").concat(b)]||s[b]||u[b]||l;return n?o.a.createElement(m,a(a({ref:r},p),{},{components:n})):o.a.createElement(m,a({ref:r},p))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var l=n.length,c=new Array(l);c[0]=b;var a={};for(var i in r)hasOwnProperty.call(r,i)&&(a[i]=r[i]);a.originalType=e,a.mdxType="string"==typeof e?e:t,c[1]=a;for(var p=2;p<l;p++)c[p]=n[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},92:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return a})),n.d(r,"metadata",(function(){return i})),n.d(r,"toc",(function(){return p})),n.d(r,"default",(function(){return s}));var t=n(3),o=n(7),l=(n(0),n(499)),c=["components"],a={custom_edit_url:null,id:"06-controller_draw_ellipse",title:"controller_draw_ellipse()"},i={unversionedId:"codrone-edu/python/Screen/06-controller_draw_ellipse",id:"codrone-edu/python/Screen/06-controller_draw_ellipse",isDocsHomePage:!1,title:"controller_draw_ellipse()",description:"Description",source:"@site/docs/codrone-edu/python/09-Screen/06-controller_draw_ellipse.md",sourceDirName:"codrone-edu/python/09-Screen",slug:"/codrone-edu/python/Screen/06-controller_draw_ellipse",permalink:"/docs/codrone-edu/python/Screen/06-controller_draw_ellipse",editUrl:null,version:"current",sidebarPosition:6,frontMatter:{custom_edit_url:null,id:"06-controller_draw_ellipse",title:"controller_draw_ellipse()"},sidebar:"codroneEduSideBar",previous:{title:"controller_draw_chord()",permalink:"/docs/codrone-edu/python/Screen/05-controller_draw_chord"},next:{title:"controller_draw_image()",permalink:"/docs/codrone-edu/python/Screen/07-controller_draw_image"}},p=[],d={toc:p};function s(e){var r=e.components,n=Object(o.a)(e,c);return Object(l.b)("wrapper",Object(t.a)({},d,n,{components:r,mdxType:"MDXLayout"}),Object(l.b)("h5",{id:"description"},"Description"),Object(l.b)("p",null,"Draws an ellipse inside the given bounding box."),Object(l.b)("h5",{id:"syntax"},"Syntax"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"controller_draw_ellipse(ellipse_list, image, fill_in, pixel_width)")," ",Object(l.b)("br",null)),Object(l.b)("h5",{id:"parameters"},"Parameters"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"ellipse_list"),": Two points to define the bounding box. Sequence of ","[(x0, y0), (x1, y1)]"," where x1 >= x0 and y1 >= y0. ",Object(l.b)("br",null),"\n",Object(l.b)("strong",{parentName:"p"},"image"),": image object created from create_image_canvas() ",Object(l.b)("br",null),"\n",Object(l.b)("strong",{parentName:"p"},"fill_in"),": optional parameter. None by default. 0 will fill with black ",Object(l.b)("br",null),"\n",Object(l.b)("strong",{parentName:"p"},"pixel_width"),": optional parameter that is the line width, in pixels. default value is 1 ",Object(l.b)("br",null)),Object(l.b)("h5",{id:"returns"},"Returns"),Object(l.b)("p",null,"None"),Object(l.b)("h5",{id:"example-code"},"Example Code"),Object(l.b)("h6",{id:"python"},"Python"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-python"},"#Python code\nfrom codrone_edu.drone import *\n\ndrone = Drone()\ndrone.pair()\n\ndrone.controller_clear_screen() # clear screen for drawing\nimage = drone.controller_create_canvas()  # create image object\n\nellipse_list = [(10, 10), (40, 40)]\ndrone.controller_draw_ellipse(ellipse_list, image) # set ellipse onto image object\n\ndrone.controller_draw_canvas(image)  # draw image onto controller screen\n\ndrone.close()\n\n")))}s.isMDXComponent=!0}}]);