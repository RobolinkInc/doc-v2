(window.webpackJsonp=window.webpackJsonp||[]).push([[265],{334:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return l})),r.d(n,"toc",(function(){return u})),r.d(n,"default",(function(){return s}));var t=r(3),o=r(7),c=(r(0),r(339)),a=["components"],i={custom_edit_url:null,title:"fly_sequence()",menu:"fly_sequence() / flySequence()",taxonomy:null,category:"flight-command-movement"},l={unversionedId:"codrone-pro/flight-commands-movement/fly-sequence",id:"codrone-pro/flight-commands-movement/fly-sequence",isDocsHomePage:!1,title:"fly_sequence()",description:"Description",source:"@site/docs/codrone-pro/05-flight-commands-movement/01-fly-sequence.md",sourceDirName:"codrone-pro/05-flight-commands-movement",slug:"/codrone-pro/flight-commands-movement/fly-sequence",permalink:"/doc-v2/docs/codrone-pro/flight-commands-movement/fly-sequence",editUrl:null,version:"current",sidebarPosition:1,frontMatter:{custom_edit_url:null,title:"fly_sequence()",menu:"fly_sequence() / flySequence()",taxonomy:null,category:"flight-command-movement"},sidebar:"codroneProSideBar",previous:{title:"takeoff()",permalink:"/doc-v2/docs/codrone-pro/flight-commands-start-stop/take-off"},next:{title:"go_to_height()",permalink:"/doc-v2/docs/codrone-pro/flight-commands-movement/go-to-height"}},u=[],p={toc:u};function s(e){var n=e.components,r=Object(o.a)(e,a);return Object(c.b)("wrapper",Object(t.a)({},p,r,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h5",{id:"description"},"Description"),Object(c.b)("p",null,"This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag"),Object(c.b)("h5",{id:"syntax"},"Syntax"),Object(c.b)("p",null,"Python: ",Object(c.b)("inlineCode",{parentName:"p"},"fly_sequence(sequence)"),Object(c.b)("br",null),"\nArduino: ",Object(c.b)("inlineCode",{parentName:"p"},"flySequence(sequence)")),Object(c.b)("h5",{id:"parameters"},"Parameters"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"sequence"),": SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG"),Object(c.b)("h5",{id:"returns"},"Returns"),Object(c.b)("p",null,"None"),Object(c.b)("h5",{id:"example-code"},"Example Code"),Object(c.b)("h6",{id:"python"},"Python"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"#Python code\nimport CoDrone\nfrom CoDrone import Sequence\n\ndrone = CoDrone.CoDrone()\ndrone.pair()\n\ndrone.takeoff()\ndrone.fly_sequence(Sequence.TRIANGLE)   # Fly triangle shape\ndrone.fly_sequence(Sequence.SPIRAL)     # Fly spiral shape\ndrone.fly_sequence(Sequence.SQUARE)     # Fly square shape\ndrone.land()\ndrone.close()\n")),Object(c.b)("h6",{id:"arduino"},"Arduino"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c"},"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.flySequence(TRIANGLE);  // Fly triangle shape\n    CoDrone.flySequence(SPIRAL);    // Fly spiral shape\n    CoDrone.flySequence(SQUARE);    // Fly square (right -> forward -> left -> backward)\n    CoDrone.land();\n}\n\nvoid loop(){\n\n}\n")))}s.isMDXComponent=!0},339:function(e,n,r){"use strict";r.d(n,"a",(function(){return s})),r.d(n,"b",(function(){return m}));var t=r(0),o=r.n(t);function c(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){c(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),p=function(e){var n=o.a.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},s=function(e){var n=p(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,c=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(r),f=t,m=s["".concat(a,".").concat(f)]||s[f]||d[f]||c;return r?o.a.createElement(m,i(i({ref:n},u),{},{components:r})):o.a.createElement(m,i({ref:n},u))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=r.length,a=new Array(c);a[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:t,a[1]=i;for(var u=2;u<c;u++)a[u]=r[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);