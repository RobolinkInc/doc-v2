(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{307:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return s}));var r=t(3),o=t(7),c=(t(0),t(312)),a=["components"],i={custom_edit_url:null,title:"fly_sequence()",menu:"fly_sequence() / flySequence()",taxonomy:null,category:"flight-command-movement"},l={unversionedId:"codrone-pro/flight-commands-movement/fly-sequence",id:"codrone-pro/flight-commands-movement/fly-sequence",isDocsHomePage:!1,title:"fly_sequence()",description:"Description",source:"@site/docs/codrone-pro/05-flight-commands-movement/01-fly-sequence.md",sourceDirName:"codrone-pro/05-flight-commands-movement",slug:"/codrone-pro/flight-commands-movement/fly-sequence",permalink:"/doc-v2/docs/codrone-pro/flight-commands-movement/fly-sequence",editUrl:null,version:"current",sidebarPosition:1,frontMatter:{custom_edit_url:null,title:"fly_sequence()",menu:"fly_sequence() / flySequence()",taxonomy:null,category:"flight-command-movement"},sidebar:"codroneProSideBar",previous:{title:"takeoff()",permalink:"/doc-v2/docs/codrone-pro/flight-commands-start-stop/take-off"},next:{title:"go_to_height()",permalink:"/doc-v2/docs/codrone-pro/flight-commands-movement/go-to-height"}},u=[],p={toc:u};function s(e){var n=e.components,t=Object(o.a)(e,a);return Object(c.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h5",{id:"description"},"Description"),Object(c.b)("p",null,"This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag"),Object(c.b)("h5",{id:"syntax"},"Syntax"),Object(c.b)("p",null,"Python: ",Object(c.b)("inlineCode",{parentName:"p"},"fly_sequence(sequence)"),Object(c.b)("br",null),"\nArduino: ",Object(c.b)("inlineCode",{parentName:"p"},"flySequence(sequence)")),Object(c.b)("h5",{id:"parameters"},"Parameters"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"sequence"),": SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG"),Object(c.b)("h5",{id:"returns"},"Returns"),Object(c.b)("p",null,"None"),Object(c.b)("h5",{id:"example-code"},"Example Code"),Object(c.b)("h6",{id:"python"},"Python"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-python"},"#Python code\nimport CoDrone\nfrom CoDrone import Sequence\n\ndef main():\n    drone = CoDrone.CoDrone()\n    drone.pair()\n\n    drone.takeoff()\n    drone.fly_sequence(Sequence.ZIG_ZAG)    # Fly zigzag (move left and right 2 times each while move forward)\n    drone.fly_sequence(Sequence.SPIRAL)     # Fly Spiral shape\n    drone.fly_sequence(Sequence.SQUARE)     # Fly square shape\n    \nif __name__ == '__main__':\n    main()\n\n")),Object(c.b)("h6",{id:"arduino"},"Arduino"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-c"},"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n    //open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    CoDrone.takeoff();\n    CoDrone.flySequence(ZIGZAG);    // Fly zigzag  (move left and right 2 times each while move forward)\n    CoDrone.flySequence(SPIRAL);    // Fly spiral shape\n    CoDrone.flySequence(SQUARE);    // Fly square (right -> forward -> left -> backward)    \n}\n\nvoid loop(){\n    \n}\n\n\n")))}s.isMDXComponent=!0},312:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),p=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(t),d=r,f=s["".concat(a,".").concat(d)]||s[d]||m[d]||c;return t?o.a.createElement(f,i(i({ref:n},u),{},{components:t})):o.a.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,a=new Array(c);a[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var u=2;u<c;u++)a[u]=t[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);