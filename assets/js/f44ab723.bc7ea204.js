(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{307:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return u})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),o=t(7),a=(t(0),t(323)),l=["components"],i={custom_edit_url:null,title:"eye_default_pattern()",menu:"eye_default_pattern() / eyeDefaultPattern()",tag:"codrone-library",taxonomy:null,category:"LED"},u={unversionedId:"codrone-pro/led/eye-default-pattern",id:"codrone-pro/led/eye-default-pattern",isDocsHomePage:!1,title:"eye_default_pattern()",description:"Description",source:"@site/docs/codrone-pro/07-led/09-eye-default-pattern.md",sourceDirName:"codrone-pro/07-led",slug:"/codrone-pro/led/eye-default-pattern",permalink:"/doc-v2/docs/codrone-pro/led/eye-default-pattern",editUrl:null,version:"current",sidebarPosition:9,frontMatter:{custom_edit_url:null,title:"eye_default_pattern()",menu:"eye_default_pattern() / eyeDefaultPattern()",tag:"codrone-library",taxonomy:null,category:"LED"},sidebar:"codroneProSideBar",previous:{title:"eye_default_color()",permalink:"/doc-v2/docs/codrone-pro/led/eye-default-color"},next:{title:"eye_off()",permalink:"/doc-v2/docs/codrone-pro/led/eye-off"}},c=[],d={toc:c};function p(e){var n=e.components,t=Object(o.a)(e,l);return Object(a.b)("wrapper",Object(r.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h5",{id:"description"},"Description"),Object(a.b)("p",null,"This function sets the default color of the eyes LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on."),Object(a.b)("h5",{id:"syntax"},"Syntax"),Object(a.b)("p",null,"Python:",Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eye_default_pattern(color, mode)"),Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eye_default_pattern(color, mode, speed)"),Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eye_default_pattern(red, green, blue, mode)"),Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eye_default_pattern(red, green, blue, mode, speed)"),Object(a.b)("br",null)),Object(a.b)("p",null,"Arduino:",Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eyeDefaultPattern(color, mode)"),Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eyeDefaultPattern(color, mode, speed)"),Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eyeDefaultPattern(red, green, blue, mode)"),Object(a.b)("br",null),"\n",Object(a.b)("inlineCode",{parentName:"p"},"eyeDefaultPattern(red, green, blue, mode, speed)")),Object(a.b)("h5",{id:"parameters"},"Parameters"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"color"),': an enum, which can be set using predefined colors out of the list below in "Example Code" under "LED Color Options" ',Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"red:")," int value from 0 to 255",Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"green"),": int value from 0 to 255",Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"blue"),": int value from 0 to 255",Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"mode"),": an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING",Object(a.b)("br",null),"\n",Object(a.b)("strong",{parentName:"p"},"speed"),": int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest",Object(a.b)("br",null)),Object(a.b)("h5",{id:"returns"},"Returns"),Object(a.b)("p",null,"None"),Object(a.b)("h5",{id:"example-code"},"Example Code"),Object(a.b)("h6",{id:"python"},"Python"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},"#Python code\nimport CoDrone\nfrom CoDrone import Mode\n\ndef main():\n    drone = CoDrone.CoDrone()\n    drone.pair()\n\n    # set default eye pattern to RGB (0, 125, 155) and double blink slowly\n    drone.eye_default_pattern(0, 125, 155, Mode.DOUBLE_BLINK, 200)\n    \nif __name__ == '__main__':\n    main()\n\n")),Object(a.b)("h6",{id:"arduino"},"Arduino"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-c"},"//Arduino code\n#include<CoDrone.h>     //header\n\nvoid setup(){\n//open serial and connect\n    CoDrone.begin(115200);\n    CoDrone.pair(Nearest);\n\n    // set default arm pattern to blue using RGB and blink quickly\n    CoDrone.eyeDefaultPattern(0,0,100, BLINK, 20);\n}\n\nvoid loop(){\n    \n}\n\n")),Object(a.b)("h6",{id:"led-color-options"},"LED Color options"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"    AliceBlue, AntiqueWhite, Aqua,\n    Aquamarine, Azure, Beige,\n    Bisque, Black, BlanchedAlmond,\n    Blue, BlueViolet, Brown,\n    BurlyWood, CadetBlue, Chartreuse,\n    Chocolate, Coral, CornflowerBlue,\n    Cornsilk, Crimson, Cyan,\n    DarkBlue, DarkCyan, DarkGoldenRod,\n    DarkGray, DarkGreen, DarkKhaki,\n    DarkMagenta, DarkOliveGreen, DarkOrange,\n    DarkOrchid, DarkRed, DarkSalmon,\n    DarkSeaGreen, DarkSlateBlue, DarkSlateGray,\n    DarkTurquoise, DarkViolet, DeepPink,\n    DeepSkyBlue, DimGray, DodgerBlue,\n    FireBrick, FloralWhite, ForestGreen,\n    Fuchsia, Gainsboro, GhostWhite,\n    Gold, GoldenRod, Gray,\n    Green, GreenYellow, HoneyDew,\n    HotPink, IndianRed, Indigo,\n    Ivory, Khaki, Lavender,\n    LavenderBlush, LawnGreen, LemonChiffon,\n    LightBlue, LightCoral, LightCyan,\n    LightGoldenRodYellow, LightGray, LightGreen,\n    LightPink, LightSalmon, LightSeaGreen,\n    LightSkyBlue, LightSlateGray, LightSteelBlue,\n    LightYellow, Lime, LimeGreen,\n    Linen, Magenta, Maroon,\n    MediumAquaMarine, MediumBlue, MediumOrchid,\n    MediumPurple, MediumSeaGreen, MediumSlateBlue,\n    MediumSpringGreen, MediumTurquoise, MediumVioletRed,\n    MidnightBlue, MintCream, MistyRose,\n    Moccasin, NavajoWhite, Navy,\n    OldLace, Olive, OliveDrab,\n    Orange, OrangeRed, Orchid,\n    PaleGoldenRod, PaleGreen, PaleTurquoise,\n    PaleVioletRed, PapayaWhip, PeachPuff,\n    Peru, Pink, Plum,\n    PowderBlue, Purple, RebeccaPurple,\n    Red, RosyBrown, RoyalBlue,\n    SaddleBrown, Salmon, SandyBrown,\n    SeaGreen, SeaShell, Sienna,\n    Silver, SkyBlue, SlateBlue,\n    SlateGray, Snow, SpringGreen,\n    SteelBlue, Tan, Teal,\n    Thistle, Tomato, Turquoise,\n    Violet, Wheat, White,\n    WhiteSmoke, Yellow, YellowGreen,\n    EndOfColor\n")))}p.isMDXComponent=!0},323:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),d=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=d(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},s=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=d(t),s=r,m=p["".concat(l,".").concat(s)]||p[s]||b[s]||a;return t?o.a.createElement(m,i(i({ref:n},c),{},{components:t})):o.a.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=s;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);