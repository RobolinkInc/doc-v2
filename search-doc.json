[{"title":"Hola","type":0,"sectionRef":"#","url":"blog/2019/05/28/hola","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Hello","type":0,"sectionRef":"#","url":"blog/2019/05/29/hello-world","content":"Welcome to this blog. This blog is created with Docusaurus 2 alpha. This is a test post. A whole bunch of other information.","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/2019/05/30/welcome","content":"Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well! Delete the whole directory if you don't want the blog features. As simple as that!","keywords":""},{"title":"controller_buzzer()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Buzzer/01-controller_buzzer","content":"Description# Plays a note using the controller's buzzer. Syntax# controller_buzzer(note, duration) Parameters# note: Integer frequency in Hz or a Note object. duration: Duration of the note in milliseconds Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.controller_buzzer(400,300) drone.controller_buzzer(600,300) drone.close() Copy","keywords":""},{"title":"drone_buzzer()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Buzzer/02-drone_buzzer","content":"Description# Plays a note using the drone's buzzer. Syntax# drone_buzzer(note, duration) Parameters# note: Integer frequency in Hz or a Note object. duration: Duration of the note in milliseconds Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.drone_buzzer(400,300) drone.drone_buzzer(600,300) drone.close() Copy","keywords":""},{"title":"CoDrone EDU Library Changelog","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/changelog","content":"","keywords":""},{"title":"Added controller screen drawing functions","type":1,"pageTitle":"CoDrone EDU Library Changelog","url":"docs/codrone-edu/python/changelog#added-controller-screen-drawing-functions","content":"Feb 4, 2022# CoDrone EDU Version 0.6 All distance sensors now return in centimeter by default Fixed all functions effected by centimeter being returned by default drone.turn_degree() is now absolute and division by 0 is fixed drone.get_height() now uses time of flight instead of barometer drone.get_flow_x, y converted from m to cm Fixed drone.avoid_wall() Added and fixed sendMotor Added and fixed sendMotorSingle Fixed buzzer functions Added buzzer flip warning when battery is less than 50% convert_meter can now return meter Added drone.append_color_data() - appends data to an existing text file Added error handling when load_classifier is empty Changed dir variable in add_color() Fixed issue when adding to a dataset that already exists Updated set_trim() to only change roll and pitch Updated get_trim_data() to return only roll and pitch  Jan 10, 2022# CoDrone EDU Version 0.5 Added drone.flip() Added convert_millimeter() and convert_meter() to return centimeter by default for all positional functions Added error handling in the color classifier Added docstrings  Dec 15, 2021# CoDrone EDU Version 0.4 Added drone.get_drone_temp() Added drone.get_pressure() Added drone.drone_buzzer() Added drone.controller_buzzer() Added drone.set_trim() Added drone.get_height Added drone.get_pressure() Added the flight sequences square, triangle, spiral, and sway. Improved takeoff command Improved port connection  Nov 23, 2021# CoDrone EDU Version 0.3 Added drone.avoid_wall() - Obstacle avoidance command. is similar to zumi.forward_avoid_collision() Added drone.detect_wall() - Uses front range sensor to detect a wall Added drone.keep_distance() - Keep distance command makes the drone maintain a distance to an obstacle Added drone.turn_left() - Can be given a degree and the drone will turn to the left Added drone.turn_right() - Can be given a degree and the drone will turn to the right Added drone.turn_degrees() - Can take an absolute degree command and will turn to that degree. Added drone.hover() - Will make the drone hover. Added reset_YPRT() - Resets the yaw pitch roll and throttle and sends the command to the drone. Added drone.keep_height() - Keep height command. A single command that is looped. Added get_colors() - returns a list [1, 2] Added get_front_color() - gets first color in get_colors() list Added get_back_color() - gets second color in get_colors() list Added predict_color() - predicts a color if you have trained the model and there is an existing file Finished basic LEDs  Oct 10, 2021# CoDrone EDU Version (0.1 - 0.2) Added Drone.acceleration_x, y, z Added Drone.angle_roll, yaw, pitch Added Drone.range_front() Added Drone.range_bottom() Added Drone.get_battery() Added Drone.open() Added Drone.takeoff() Added Drone.land()  "},{"title":"pair()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Connection/01-pair","content":"Description# This function connects your controller with the program. You can also set the specific USB port name. Syntax# pair() pair(portname) Parameters# portname: A string containing the port name or number. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair()# pair automatically, may not always work # drone.pair(port_name = 'COM3') # pair with a specific port drone.takeoff() drone.hover(1) drone.land() drone.close() Copy","keywords":""},{"title":"avoid_wall()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/01-avoid_wall","content":"Description# A looped method that makes the drone fly forward until it reaches a desired distance based on the front range sensor. The range of front sensor is from 0mm-1000mm (0cm-100cm) Syntax# avoid_wall()avoid_wall(timeout)avoid_wall(distance)avoid_wall(timeout, distance) Parameters# timeout: timeout is an optional paramaeter that is the duration in seconds that the function will run. the default value is 2distance: distance is an optional parameter that is the distance in millimeters the drone will stop in front of an object. the default value is 700 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # fly forward until a wall is found 600 mm away. run this loop for 10 seconds. drone.avoid_wall(10,600) drone.land() drone.close() Copy","keywords":""},{"title":"circle()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/02-circle","content":"Description# Flies the drone in the shape of a circle. Syntax# circle()circle(speed, direction) Parameters# speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 75.direction: optional parameter that determines the direction of the circle. 1 is right, -1 is left. default value is 1. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # default circle parameters (75, 1) drone.circle() drone.land() drone.close() Copy","keywords":""},{"title":"flip()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/04-flip","content":"Description# Calls sendFlip() command to flip the drone in desired direction. Options are: \"front\", \"back\", \"left\", and \"right\" Syntax# flip()flip(direction) Parameters# direction: optional parameter that is the direction the drone will flip. default is \"back\" Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.flip(\"front\") drone.land() drone.close() Copy","keywords":""},{"title":"detect_wall()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/03-detect_wall","content":"Description# Returns True when a distance below the threshold is reached. The range of front sensor is from 0mm-1000mm (0cm-100cm) Syntax# detect_wall()detect_wall(distance) Parameters# distance: An optional parameter that is the threshold in millimeters that will return True. The default value is 500 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # if a wall is detected in less than 500mm true will be returned. if drone.detect_wall(): print(\"wall detected!\") else: print(\"no wall detected!\") drone.land() drone.close() Copy","keywords":""},{"title":"keep_distance()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/06-keep_distance","content":"Description# A looped method that makes the drone fly forward until it reaches a desired distance. Once the desired distance in reached the drone will maintin that distance. The range of front sensor is from 0mm-1000mm (0cm-100cm) Syntax# keep_distance()keep_distance(timeout)keep_distance(distance)keep_distance(timeout, distance) Parameters# timeout: timeout is an optional paramaeter that is the duration in seconds that the function will run. The default value is 2distance: distance is an optional parameter that is the distance in millimeters the drone will stop and maintin distance in front of an object. The default value is 500 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # fly forward until a wall is found. maintin a distance of 600mm (60cm) from an object once detected. run this loop for 10 seconds. drone.keep_distance(10,600) drone.land() drone.close() Copy","keywords":""},{"title":"move()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/07-move","content":"Description# The move command will move the drone based on the set flight variables (set_pitch, set_roll, etc). If given a parameter the move command will execute the movement for the given amount of seconds. If given no parameter then the drone will execute the move command indefinitley. You must takeoff() first to use a move() function. Syntax# move(duration) Parameters# duration: Duration of the movement Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_pitch(50) drone.move(1)# move command executes the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"print_move_values()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/08-print_move_values","content":"Description# Prints the current values of roll, pitch, yaw, and throttle flight variables. Syntax# print_move_values() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.set_roll(50) drone.print_move_values()# will print pitch and roll at 50 and throttle and yaw at 0 drone.land() drone.close() Copy","keywords":""},{"title":"hover()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/05-hover","content":"Description# This function makes the drone hover for a given amount of time. If given no parameters, it will hover indefinitely until given a another command. Syntax# hover(duration) Parameters# duration: Duration of the hovering in seconds Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() Copy","keywords":""},{"title":"reset_move()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/09-reset_move","content":"Description# The reset_move command will reset the values of roll, pitch, yaw, and throttle to 0. Syntax# reset_move()reset_move(attempts) Parameters# attempts: Optional parameter that sends the reset_move command multiple times. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.set_roll(50) drone.reset_move()# reset the pitch and roll to 0. drone.land() drone.close() Copy","keywords":""},{"title":"sendControl()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/10-sendControl","content":"Description# Send roll, pitch, yaw, and throttle values to the drone. Syntax# sendControl(roll, pitch, yaw, throttle) Parameters# roll: An int from -100 to 100 that sets the roll variable. negative is left, positive is rightpitch: An int from -100 to 100 that sets the pitch variable. negative is backwards, positive is forwardsyaw: An int from -100 to 100 that sets the yaw variable. negative is left, positive is rightthrottle: An int from -100 to 100 that sets the throttle variable. negative is down, positive is up Returns# #TODO Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.sendControl(0,30,0,0)# setting pitch to 30 time.sleep(1)# wait for 1 second while the drone is moving forward drone.land() drone.close() Copy","keywords":""},{"title":"set_pitch()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/12-set_pitch","content":"Description# This is a setter function that allows you to set the pitch variable. Once you set pitch, you have to use move() to actually execute the movement. The pitch variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to pitch again. Syntax# set_pitch(power) Parameters# power: An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # Drone goes forward for 1 second with 50 power drone.set_pitch(50) drone.move(1)# move command executes the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"set_roll()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/13-set_roll","content":"Description# This is a setter function that allows you to set the roll variable. Once you set roll, you have to use move() to actually execute the movement. The roll variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to roll again. Syntax# set_roll(power) Parameters# power: An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1)# move command executes the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"sendControlWhile()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/11-sendControlWhile","content":"Description# Send roll, pitch, yaw, and throttle values to the drone continously for the given duration in milliseconds Syntax# sendControlWhile(roll, pitch, yaw, throttle, duration) Parameters# roll: An int from -100 to 100 that sets the roll variable. negative is left, positive is rightpitch: An int from -100 to 100 that sets the pitch variable. negative is backwards, positive is forwardsyaw: An int from -100 to 100 that sets the yaw variable. negative is left, positive is rightthrottle: An int from -100 to 100 that sets the throttle variable. negative is down, positive is upduration: A duration in milliseconds Returns# #TODO Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.sendControl(0,30,0,0)# setting pitch to 30 time.sleep(1)# wait for 1 second while the drone is moving forward drone.land() drone.close() Copy","keywords":""},{"title":"set_yaw()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/15-set_yaw","content":"Description# This is a setter function that allows you to set the yaw variable. Once you set yaw, you have to use move() to actually execute the movement. The yaw variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to yaw again. Syntax# set_yaw(power) Parameters# power: An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw is left, positive yaw is right. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50 power drone.set_yaw(50) drone.move(1)# move command executes the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"set_throttle()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/14-set_throttle","content":"Description# This is a setter function that allows you to set the throttle variable. Once you set throttle, you have to use move() to actually execute the movement. The throttle variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to throttle again. Syntax# set_throttle(power) Parameters# power: An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle is down, positive throttle is up. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_throttle(50) drone.move(1)# move command executes the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"spiral()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/16-spiral","content":"Description# Flies the drone in the shape of a downward spiral. Syntax# spiral()spiral(speed, seconds, direction) Parameters# speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 50.seconds: optional parameter that is the duration in seconds the drone flies in a downward spiral. default value is 5.direction: optional parameter that determines the direction of the spiral. 1 is right, -1 is left. default value is 1. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # default spiral parameters (50, 5, 1) drone.spiral() drone.land() drone.close() Copy","keywords":""},{"title":"sway()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/18-sway","content":"Description# Flies the drone in a swaying motion. Syntax# sway()sway(speed, seconds, direction) Parameters# speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 30.seconds: optional parameter that is the duration in seconds the drone will fly in each \"sway\" motion. default value is 2direction: optional parameter that determines the direction of the sway. 1 is right, -1 is left. default value is 1. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # default sway parameters (30, 2, 1) drone.sway() drone.land() drone.close() Copy","keywords":""},{"title":"square()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/17-square","content":"Description# Flies the drone in the shape of a square. Syntax# square()square(speed, seconds, direction) Parameters# speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 60.seconds: optional parameter that is the duration in seconds the drone flies for each side of the square. default value is 1.direction: optional parameter that determines the direction of the square. 1 is right, -1 is left. default value is 1. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # default square parameters (60, 1, 1) drone.square() drone.land() drone.close() Copy","keywords":""},{"title":"triangle()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/19-triangle","content":"Description# Flies the drone in the shape of a triangle. Syntax# triangle()triangle(speed, seconds, direction) Parameters# speed: optional parameter that is the speed the drone will move. integer from 0 - 100. default value is 60.seconds: optional parameter that is the duration in seconds the drone flies for each side of the triangle. default value is 1.direction: optional parameter that determines the direction of the triangle. 1 is right, -1 is left. default value is 1. Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() # default triangle parameters (60, 1, 1) drone.triangle() drone.land() drone.close() Copy","keywords":""},{"title":"turn_degree()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/20-turn_degree","content":"Description# Turns right or left with absolute referemce frame to drone's initial heading. Positive degrees turn to right and negative degrees turn to the left. Syntax# turn_degree(degree, timeout, p_value) Parameters# degree: integer from -180->180 degreestimeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3p_value: optional parameter that is the gain of the proportional controller, if this increased CDE will turn quicker, the smaller the slower. default value is 10 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.turn_degree(90)# drone will turn right 90 degrees drone.land() drone.close() Copy","keywords":""},{"title":"turn_left()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/21-turn_left","content":"Description# Turns the drone left using the built in gyroscope. The default degree is 90 Syntax# turn_left()turn_left(degree)turn_left(timeout)turn_left(degree, timeout) Parameters# degree: optional parameter that turns the drone in the given degree. default value is 90.timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.turn_left()# make a 90 degree left turn. drone.hover(1)# wait for 1 second in the air drone.turn_left(30,3)# make a 30 degree left turn with a 3 second timeout. drone.land() drone.close() Copy","keywords":""},{"title":"emergency_stop()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Start-Stop/01-emergency_stop","content":"Description# This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and emergency stop, it is recommended to run a hover() or time.sleep() in between the takeoff() and emergency_stop(), because the CoDrone EDU might miss the emergency_stop() command. Syntax# Python: emergency_stop() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3)#Recommended to have a hover() or time.sleep(1) before landing drone.emergency_stop() drone.close() Copy","keywords":""},{"title":"turn_right()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Movement/22-turn_right","content":"Description# Turns the drone right using the built in gyroscope. The default degree is 90 Syntax# turn_right()turn_right(degree)turn_right(timeout)turn_right(degree, timeout) Parameters# degree: optional parameter that turns the drone in the given degree. default value is 90.timeout: optional parameter that is duration in seconds that drone will try to turn. default value is 3 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.turn_right()# make a 90 degree right turn. drone.hover(1)# wait for 1 second in the air drone.turn_right(30,3)# make a 30 degree right turn with a 3 second timeout. drone.land() drone.close() Copy","keywords":""},{"title":"reset_trim()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Start-Stop/03-reset_trim","content":"Description# You can reset the roll and pitch trim of the drone in case your drone is drifting. This function will reset the roll and pitch trim values back to zero. Syntax# reset_trim() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.set_trim(5,0) print(drone.get_trim()) drone.takeoff() drone.hover(3) drone.land() drone.reset_trim() print(drone.get_trim()) drone.close() Copy","keywords":""},{"title":"land()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Start-Stop/02-land","content":"Description# This function makes the drone stop all commands, hover, and make a soft landing where it is. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and immediately land, it is recommended to run a hover() or time.sleep() in between the takeoff() and land(), because the CoDrone EDU may miss the land command otherwise. Syntax# land() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3)# include a hover() or time.sleep() to prevent land() from skipping drone.land() drone.close() Copy","keywords":""},{"title":"takeoff()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Start-Stop/05-take_off","content":"Description# This function makes the drone takeoff and hover. The drone will always hover for 1 second in order to stabilize before it executes the next command. Syntax# takeoff() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() Copy","keywords":""},{"title":"controller_LED_off()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/LED/01-controller_LED_off","content":"Description# Turns off the controller LEDs. Syntax# controller_LED_off() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.controller_LED_off() drone.close() Copy","keywords":""},{"title":"set_trim()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Flight-Commands-Start-Stop/04-set_trim","content":"Description# You can set the roll and pitch trim of the drone in case your drone is drifting. For example, if the drone is drifting to its right, you may want to set the roll to a small negative value. This trim will remain saved, even after powering off until you've changed the trim either programmatically, or done a reset with the remote. NOTE: If you're setting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the takeoff commmand might be skipped. Syntax# set_trim(roll, pitch) Parameters# roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* import time drone = Drone() drone.pair() drone.set_trim(-5,0)# example: drone is drifting right, so trim to roll left a little bit time.sleep(1)# Add a time.sleep(1) before takeoff if you're planning to set the trim before takeoff drone.takeoff() drone.hover(3) drone.land() drone.close() Copy","keywords":""},{"title":"drone_LED_off()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/LED/02-drone_LED_off","content":"Description# Turns off the drone LED. Syntax# drone_LED_off() Parameters# None Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.drone_LED_off() drone.close() Copy","keywords":""},{"title":"set_drone_LED()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/LED/04-set_drone_LED","content":"Description# This function sets the LED color and brightness of the CoDrone EDU's LED. This is done by setting RGB values (0 - 255) and brightness level (0 - 100) Syntax# set_drone_LED(red, green, blue, brightness) Parameters# red: int value from 0 -255green: int value from 0 -255blue: int value from 0 -255brightness: int value from 0 - 100 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.set_drone_LED(0,0,255,100) drone.close() Copy","keywords":""},{"title":"set_controller_LED()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/LED/03-set_controller_LED","content":"Description# This function sets the LED color and brightness of the CoDrone EDU controller's LEDs. This is done by setting RGB values (0 - 255) and brightness level (0 - 100) Syntax# set_controller_LED(red, green, blue, brightness) Parameters# red: int value from 0 -255green: int value from 0 -255blue: int value from 0 -255brightness: int value from 0 - 100 Returns# None Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.set_controller_LED(0,0,255,100) drone.close() Copy","keywords":""},{"title":"get_bottom_range()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/02-get_bottom_range","content":"Description# This is a getter function which returns the current bottom range of the drone. The default unit of measurement is centimeters. This function uses the bottom range sensor to measure distance from the drone to the surface below the drone. Syntax# get_bottom_range() get_bottom_range(unit=\"<cm, in, mm, m>)\" Parameters# unit: The unit of measurement that is chosen for the height distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified cm is chosen by default. Returns# The current bottom range calculated by the bottom range sensor (cm default). Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3) bottom_range = drone.get_bottom_range() print(bottom_range) drone.land() drone.close() Copy","keywords":""},{"title":"get_battery()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/01-get_battery","content":"Description# This function returns the current battery level percentage of the drone. Syntax# get_battery() Parameters# NONE Returns# The current battery percentage of the drone's battery. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() battery = drone.get_battery() print(battery) drone.close() Copy","keywords":""},{"title":"get_drone_temp()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/03-get_drone_temp","content":"Description# This is a getter function gets the drone's temperature from the barometer. The sensor reads the drone’s temperature, not the air around it. Syntax# get_drone_temp() Parameters# None Returns# The temperature in Celsius as a float. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() temperature = drone.get_drone_temp() print(temperature) drone.close() Copy","keywords":""},{"title":"get_flight_state()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/04-get_flight_state","content":"Description# get_flight_state() is a getter function that gets the current flight state of the drone. Syntax# get_flight_state() Parameters# None Returns# The current flight state of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.get_flight_state() drone.close() Copy","keywords":""},{"title":"get_flow_y()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/06-get_flow_y","content":"Description# This getter function gets the relative position value calculated by the optical flow sensor from the y direction (left and right). Syntax# get_flow_y() get_flow_y(unit=\"<cm, in, mm, m>)\" Parameters# unit: The unit of measurement that is chosen for the distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified \"cm\" is chosen by default. Returns# The relative position value calculated by the optical flow sensor from the x direction. (cm default). Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.set_roll(50) drone.move(1) print(drone.get_flow_y()) drone.land() drone.close() Copy","keywords":""},{"title":"get_flow_x()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/05-get_flow_x","content":"Description# This getter function gets the relative position value calculated by the optical flow sensor from the x direction (forward and reverse). Syntax# get_flow_x() get_flow_x(unit=\"<cm, in, mm, m>)\" Parameters# unit: The unit of measurement that is chosen for the distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified \"cm\" is chosen by default. Returns# The relative position value calculated by the optical flow sensor from the x direction. (cm default). Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.set_pitch(50) drone.move(1) print(drone.get_flow_x()) drone.land() drone.close() Copy","keywords":""},{"title":"get_front_range()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/07-get_front_range","content":"Description# This is a getter function which returns the current Range from the front range sensor. The default unit of measurement is centimeters. This function uses the front range sensor to measure distance from the drone to the surface in front of the drone. Syntax# get_front_range() get_front_range(unit=\"<cm, in, mm, m>)\" Parameters# unit: The unit of measurement that is chosen for the range distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified \"cm\" is chosen by default. Returns# The current range calculated by the front range sensor (cm default). Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3) distance = drone.get_front_range() print(distance) drone.land() drone.close() Copy","keywords":""},{"title":"get_pos_x()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/08-get_pos_x","content":"Description# Getter function that gets the x position of the drone. Syntax# get_pos_x() get_pos_x(unit=\"<cm, in, mm, m>) Parameters# unit: The unit of measurement that is chosen for the position distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified cm is chosen by default. Returns# The current x position of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_x()) drone.land() drone.close() Copy","keywords":""},{"title":"get_pos_z()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/10-get_pos_z","content":"Description# Getter function that gets the z position of the drone. Syntax# get_pos_z() get_pos_z(unit=\"<cm, in, mm, m>) Parameters# unit: The unit of measurement that is chosen for the position distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified cm is chosen by default. Returns# The current z position of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_z()) drone.land() drone.close() Copy","keywords":""},{"title":"get_pos_y()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/09-get_pos_y","content":"Description# Getter function that gets the y position of the drone. Syntax# get_pos_y() get_pos_y(unit=\"<cm, in, mm, m>) Parameters# unit: The unit of measurement that is chosen for the position distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified cm is chosen by default. Returns# The current y position of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() print(drone.get_pos_y()) drone.land() drone.close() Copy","keywords":""},{"title":"get_pressure()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/12-get_pressure","content":"Description# This is a getter function that returns the data from the barometer. The function returns a value in the unit Pascals. Note: 1atm = 101325 Pa Syntax# get_pressure() Parameters# None Returns# Float that represents air pressure in Pascals. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close() Copy","keywords":""},{"title":"get_position_data()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/11-get_position_data","content":"Description# get_position_data is a getter function that retuns a list of position data for the drone. Syntax# get_position_data()get_position_data(delay) Parameters# delay: the delay in seconds before the position data is returned. default value is 0.01 Returns# A list of position data for the drone. The list contains the current time of the running program [0], x position data [1], y position data [2], z position data [3]. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() data = drone.get_position_data() print(data) drone.land() drone.close() Copy","keywords":""},{"title":"get_x_accel()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/14-get_x_accel","content":"Description# Getter function that gets the x acceleration of the drone. Syntax# get_x_accel() Parameters# None Returns# The current x acceleration of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() print(drone.get_x_accel()) drone.land() drone.close() Copy","keywords":""},{"title":"get_trim()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/13-get_trim","content":"Description# This function gets the current trim values of the drone. Syntax# get_trim() Parameters# None Returns# A list of trim data Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() # print the pressure trim = drone.get_trim() print(trim) print(trim[0]) print(trim[1]) drone.close() Copy","keywords":""},{"title":"get_x_angle()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/15-get_x_angle","content":"Description# This is a getter function which returns the current X angle from the gyroscope in the drone. This angle is on the \"roll\" axis Syntax# get_x_angle() Parameters# None Returns# The current angle in regards to the X direction. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() print(drone.get_x_angle()) drone.close() Copy","keywords":""},{"title":"get_y_accel()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/16-get_y_accel","content":"Description# Getter function that gets the y acceleration of the drone. Syntax# get_y_accel() Parameters# None Returns# The current y acceleration of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() print(drone.get_y_accel()) drone.land() drone.close() Copy","keywords":""},{"title":"get_y_angle()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/17-get_y_angle","content":"Description# This is a getter function which returns the current Y angle from the gyroscope in the drone. This angle is on the \"pitch\" axis Syntax# get_y_angle() Parameters# None Returns# The current angle in regards to the Y direction. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() print(drone.get_y_angle()) drone.close() Copy","keywords":""},{"title":"get_z_accel()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/18-get_z_accel","content":"Description# Getter function that gets the z acceleration of the drone. Syntax# get_z_accel() Parameters# None Returns# The current z acceleration of the drone. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() print(drone.get_z_accel()) drone.land() drone.close() Copy","keywords":""},{"title":"get_z_angle()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/19-get_z_angle","content":"Description# This is a getter function which returns the current Z angle from the drone. This is angle is the \"yaw\" direction Syntax# get_z_angle() Parameters# None Returns# The current angle in regards to the Z direction. Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() print(drone.get_z_angle()) drone.close() Copy","keywords":""},{"title":"get_height()","type":0,"sectionRef":"#","url":"docs/codrone-edu/python/Sensors/20-get_height","content":"Description# This is a getter function which returns the current height of the drone. The default unit of measurement is centimeters. This function uses the bottom range sensor to measure distance from the drone to the surface below the drone. Syntax# get_height() get_height(unit=\"<cm, in, mm, m>)\" Parameters# unit: The unit of measurement that is chosen for the height distance. Available units are \"m\" (meter), \"cm\" (centimeter), \"mm\" (millimeter), or \"in\" (inch). If a parameter is not specified cm is chosen by default. Returns# The current height calculated by the bottom range sensor (cm default). Example Code# Python# #Python code from codrone_edu.drone import* drone = Drone() drone.pair() drone.takeoff() drone.hover(3) height = drone.get_height() print(height) drone.land() drone.close() Copy","keywords":""},{"title":"CoDrone Mini Library Changelog","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/changelog","content":"Aug 14, 2018 CoDrone mini Version 1.1.3 New Function: pair() : Updated to a new function for pairing with the CoDrone. Pair will pair with the nearest, then save your drone info to your project folder and use the next time you pair with no parameters. calibrate() : you can reset and calibrate drone programmatically. move() function updated. It can take 4 parameters move(roll,pitch,yaw,throttle) to move indefinitely May 21, 2018# CoDrone Version 1.1.2 Print port name and drone name at the start of the program. Solve setAllRGB() function error (couldn't change the colors when repeated it too fast). Mar 28, 2018# CoDrone Version 1.1.1 Change the Mode name Change the default value in flight command Add some error messages for debugging mode Mar 16, 2018# CoDrone Version 1.1.0 Remove \"time.\" in protocol.py Add legacy functions Fix functions about degrees. Dec 16, 2017# CoDrone Version 0.2 The first CoDrone library release for the Python Package Index","keywords":""},{"title":"pair()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Connection/01-pair","content":"Description# This function connects your controller with the program. You can set debug equal to True if you want to see helpful print statements that can help you debug your code. We recommend setting this to True to check if commands are being skipped. You can also set the specific USB port name. Syntax# pair() pair(port_name) pair(debug=False) pair(debug=False, port_name) Parameters# port_name: A string containing the port name or number.debug: Boolean that is default to False. Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair()# pair automatically, may not always work # drone.pair(debug=True) # sets the debug statements to True # drone.pair(port_name = 'COM3') # pair with a specific port drone.takeoff() drone.hover(3) drone.land() drone.close() Copy","keywords":""},{"title":"fly_sequence()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Movement/fly-sequence","content":"Description# This function makes the drone fly in a pre-determined shape. The options are square, spiral, triangle, hop, sway, and zigzag. It's recommended that you make sure the drone is trimmed and hovering stably before running a sequence, otherwise the sequence may not appear as expected. Syntax# Python: fly_sequence(sequence) Parameters# sequence: SQUARE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG Returns# None Example Code# Python# #Python code import CoDrone_mini from CoDrone_mini import Sequence drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.fly_sequence(Sequence.ZIGZAG)# Fly zigzag (move left and right 2 times each while move forward) drone.fly_sequence(Sequence.SPIRAL)# Fly Spiral shape drone.fly_sequence(Sequence.SQUARE)# Fly square shape drone.land() drone.close() Copy","keywords":""},{"title":"flip()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Movement/flip","content":"Description# This function makes the drone do a flip in one of four directions: forward, backward, left, or right. It's recommended that you wait a few seconds in between successive flips, otherwise the sequence may not appear as expected. Syntax# Python: flip(direction) Parameters# direction: Direction.FORWARD, Direction.BACKWARD, Direction.LEFT, Direction.RIGHT Returns# None Example Code# Python# #Python code import CoDrone_mini import time from CoDrone_mini import Direction drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.flip(Direction.FORWARD) time.sleep(3)# recommended wait time between flips drone.flip(Direction.LEFT) drone.land() drone.close() Copy","keywords":""},{"title":"hover()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Movement/hover","content":"Description# This function makes the drone hover for a given amount of time. If given no parameters, it will hover indefinitely until given a another command. Syntax# hover(duration) Parameters# duration: the duration of the hovering in seconds. Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3)# hover for 3 seconds #drone.hover() # hover indefinitely drone.land() drone.close() Copy","keywords":""},{"title":"go()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Movement/go","content":"Description# A simpler Junior level function that represents flight with direction with more natural language. It simply flies in the given direction for a given duration and power. Syntax# go(direction) go(direction, duration) go(direction, duration, power) Parameters# direction: an enum in Python. It’s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN. duration: the duration of the flight motion in seconds. If undefined, defaults to run indefinitely. power: the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined. Returns# None Example Code# Python# #Python code import CoDrone_mini from CoDrone_mini import Direction drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Try each of these commands by uncommenting them #drone.go(Direction.FORWARD) # Go forward indefinitely at 50% power #drone.go(Direction.UP, 2) # Go up for 5 seconds at 50% power drone.go(Direction.BACKWARD,3,40)# Go backwards for 3 seconds at 70% power drone.land() drone.close() Copy","keywords":""},{"title":"emergency_stop()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/01-emergency-stop","content":"Description# This function immediately stops all commands and motors, so the drone will stop flying immediately. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and emergency stop, it is recommended to run a hover() or time.sleep() in between the takeoff() and emergency_stop(), because the CoDrone Mini might miss the emergency_stop() command. Syntax# Python: emergency_stop() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3)#Recommended to have a hover() or time.sleep(1) before landing drone.emergency_stop() drone.close() Copy","keywords":""},{"title":"turn()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Movement/turn","content":"Description# A function that represents yaw, but with more natural language. It turns CoDrone Mini in the given direction, with the given duration and power. Syntax# turn(direction) turn(direction, duration) turn(direction, duration, power) Parameters# direction : an enum in Python. It’s the direction of the turn, which can either LEFT or RIGHT. duration : the duration of the turn in seconds. If 0, it will turn default to turn indefinitely. power : the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined. Returns# None Example Code# Python# #Python code import CoDrone_mini from CoDrone_mini import Direction drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.turn(Direction.LEFT)# Turn left indefinitely at 50 power drone.turn(Direction.RIGHT,3,100)# Turn right for 3 seconds at 100 power drone.land() drone.close() Copy","keywords":""},{"title":"headless_off()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/headless-off","content":"Description# This function turns off headless mode. In this mode, the drone is keeping track of which direction it's facing and will fly relative to which direction it is facing. Remember that the \"front\" is denoted by the red line on the shell. Syntax# headless_off() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.headless_on()# Run the code once, then switch to headless_off() and run again to see the difference. drone.takeoff() drone.set_yaw(20) drone.move(1) drone.set_yaw(0) drone.set_pitch(40) drone.move(1) drone.land() drone.close() Copy","keywords":""},{"title":"land()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/land","content":"Description# This function makes the drone stop all commands, hover, and make a soft landing where it is. The function will also reset the flight motion variables to 0. NOTE: If you want to take off and immediately land, it is recommended to run a hover() or time.sleep() in between the takeoff() and land(), because the CoDrone Mini will often miss the land command otherwise. Syntax# land() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3)# include a hover() or time.sleep() to prevent land() from skipping drone.land() drone.close() Copy","keywords":""},{"title":"headless_on()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/headless-on","content":"Description# This function turns on headless mode, meaning that no matter in which direction the drone is facing, it will fly in the directions relative to you. This is ideal for long range drones. Syntax# headless_on() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.headless_on()# Run the code once, then switch to headless_off() and run again to see the difference. drone.takeoff() drone.set_yaw(20) drone.move(1) drone.set_yaw(0) drone.set_pitch(40) drone.move(1) drone.land() drone.close() Copy","keywords":""},{"title":"reset_trim()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/reset-trim","content":"Description# You can reset the roll and pitch trim of the drone in case your drone is drifting. This function will reset the roll and pitch trim values back to zero. NOTE: If you're resetting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped. Syntax# reset_trim() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.set_trim(5,0) print(drone.get_trim()) drone.takeoff() drone.hover(3) drone.land() drone.reset_trim() print(drone.get_trim()) drone.close() Copy","keywords":""},{"title":"reset_sensor()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/reset-sensor","content":"Description# This function will reset the roll and pitch trim values back to zero and set all the gyro angles back to zero for roll, pitch, and yaw. NOTE: If you're resetting right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped. Syntax# reset_sensor() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() print(\"Before \", drone.get_angle()) drone.takeoff() drone.set_yaw(50) drone.move(1) drone.land() print(\"After \",drone.get_angle()) drone.reset_sensor() print(\"Reset \", drone.get_angle()) drone.close() Copy","keywords":""},{"title":"takeoff()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/take-off","content":"Description# This function makes the drone takeoff and hover. The drone will always hover for 3 seconds in order to stabilize before it executes the next command. If it receives no command for 8 seconds, it will automatically land. Syntax# takeoff() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() Copy","keywords":""},{"title":"get_pitch()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/get-pitch","content":"Description# This is a getter function that gets the value of the pitch variable. Syntax# Python: get_pitch() Parameters# None Returns# The power of the pitch variable (int) Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current pitch with getter function print(\"Current pitch : \", drone.get_pitch()) drone.close() Copy","keywords":""},{"title":"set_trim()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Commands-Start-Stop/set-trim","content":"Description# You can set the roll and pitch trim of the drone in case your drone is drifting. For example, if the drone is drifting to its right, you may want to set the roll to a small negative value. This trim will remain saved, even after powering off until you've changed the trim either programmatically, or done a reset with the remote. NOTE: If you're setting the trim right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the takeoff commmand might be skipped. Syntax# set_trim(roll, pitch) Parameters# roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.set_trim(-1,0)# example: drone is drifting right, so trim to roll left a little bit time.sleep(1)# Add a time.sleep(1) before takeoff if you're planning to set the trim before takeoff drone.takeoff() drone.hover(3) drone.land() drone.close() Copy","keywords":""},{"title":"get_roll()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/get-roll","content":"Description# This is a getter function that gets the value of the roll variable. Syntax# Python: get_roll() Parameters# None Returns# The power of the roll variable (int) Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current roll with getter function print(\"Current Roll : \", drone.get_roll()) drone.close() Copy","keywords":""},{"title":"get_yaw()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/get-yaw","content":"Description# This is a getter function that gets the value of the yaw variable. Syntax# Python: get_yaw() Parameters# None Returns# The power of the yaw variable (int) Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current yaw with getter function print(\"Current yaw : \", drone.get_yaw()) drone.close() Copy","keywords":""},{"title":"get_throttle()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/get-throttle","content":"Description# This is a getter function that gets the value of the throttle variable. Syntax# Python: get_throttle() Parameters# None Returns# The power of the throttle variable (int) Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # Print current throttle with getter function print(\"Current throttle : \", drone.get_throttle()) drone.close() Copy","keywords":""},{"title":"move()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/move","content":"Description# You can use this function to create more complex flight movements. With no parameters, move() will just run based on whatever the flight variables have been set to with functions like setPitch() and setThrottle() indefinitely. You can also run it for a certain duration. The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once. You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen. You must takeoff() first to use a move() function. Syntax# move(): runs indefinitely move(duration): runs the given number of seconds move(roll, pitch, yaw, throttle): runs indefinitely move(duration, roll, pitch, yaw, throttle) Parameters# duration: the duration of the flight motion in seconds. roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 yaw: the power of the yaw, which is an int from -100 to 100 throttle: the power of the throttle, which is an int from -100 to 100 Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.set_pitch(20) drone.move(5)# Move 5 seconds based on the current value of flight variables drone.move()# Move indefinitely based on the current value of flight variables drone.set_pitch(0)# Set pitch back to 0 for the remaining examples drone.move(5,0,0,80,80)# Move up(throttle) and turn left(yaw) for 5 seconds drone.land() drone.close() Copy","keywords":""},{"title":"set_roll()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/set-roll","content":"Description# This is a setter function that allows you to set the roll variable. Once you set roll, you have to use move() to actually execute the movement. The roll variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to roll again. Syntax# Python: set_roll(power) Parameters# power: An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right. Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1)#use move() to execute the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"set_pitch()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/set-pitch","content":"Description# This is a setter function that allows you to set the pitch variable. Once you set pitch, you have to use move() to actually execute the movement. The pitch variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to pitch again. Syntax# Python: set_pitch(power) Parameters# power: An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards. Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_pitch(50) drone.move(1)#use move() to execute the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"set_throttle()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/set-throttle","content":"Description# This is a setter function that allows you to set the throttle variable. Once you set throttle, you have to use move() to actually execute the movement. The throttle variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to throttle again. Syntax# Python: set_throttle(power) Parameters# power: An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends. Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50% power drone.set_throttle(50) drone.move(1)#use move() to execute the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"set_yaw()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Flight-Variables/set-yaw","content":"Description# This is a setter function that allows you to set the yaw variable. Once you set yaw, you have to use move() to actually execute the movement. The yaw variable will remain what you last set it until the end of the flight sequence, so you will have to set it back to 0 if you don't want the drone to yaw again. Syntax# Python: set_yaw(power) Parameters# power: An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right. Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50% power drone.set_yaw(50) drone.move(1)#use move() to execute the movement for 1 second drone.land() drone.close() Copy","keywords":""},{"title":"LED_color()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/LED/led-color","content":"Description# This function sets the LED color of the CoDrone Mini's LED using RGB values and their brightness with a value from 1 - 100. NOTE: If you're setting the LED right before a takeoff, make sure to add a time.sleep(1) before the takeoff(), otherwise the take off might be skipped. Syntax# Python: LED_color(red, green, blue, brightness) Parameters# red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: int value from 0 to 100, which represents the brightness of the light Returns# None Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() drone.LED_color(255,0,0,100)# set LED color to red using RGB time.sleep(1)# Add a time.sleep(1) before takeoff if you're planning to set the LED cover before takeoff, otherwise the takeoff might get missed drone.takeoff() drone.land() drone.close() Copy","keywords":""},{"title":"LED_pattern()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/LED/led-pattern","content":"Description# This function sets the color of the arm LED lights to flash in a particular pre-set pattern at a given speed. Syntax# Python: LED_pattern(red, green, blue, mode) LED_pattern(red, green, blue, mode, speed) Parameters# red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, PULSE, FADE_IN, FADE_OUT speed: int value from 1-10, which represents the speed of the pattern. 1 is slowest, 10 is fastest. Default value is 5. Returns# None Example Code# Python# #Python code import CoDrone_mini from CoDrone_mini import Mode drone = CoDrone_mini.CoDrone() drone.pair() time.sleep(1)# to prevent skipping the LED command drone.LED_pattern(0,100,0, Mode.PULSE,5) drone.close() Copy","keywords":""},{"title":"reset_LED()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/LED/reset-led","content":"Description# This function sets the LED color back to red and sets the mode to SOLID, which is the original default color and pattern. Syntax# reset_LED() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.reset_LED() drone.close() Copy","keywords":""},{"title":"turn_off_LED()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/LED/turn-off-led","content":"Description# This function turns off the LED. Syntax# turn_off_LED() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.turn_off_LED() drone.close() Copy","keywords":""},{"title":"play_note()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/LED/play-note","content":"Description# This function allows you to program the buzzer on the remote, not the drone. This function takes two parameters. The first is the note or frequency desired. The second parameter is how long you want the note to play in seconds. The Note class must be imported to use this function. Syntax# play_note(note, duration)play_note(frequency, duration) Parameters# note: An enum type from the Note class from Note.C3 to Note.B7 frequency: An integer representing the note's frequency in Hertz duration: A float type that represents the duration of the note in seconds Returns# None Example Code# Python# #Python code import CoDrone_mini from CoDrone_mini import Note drone = CoDrone_mini.CoDrone() drone.pair() drone.play_note(Note.C4,0.5) drone.play_note(Note.D4,0.5) drone.play_note(Note.E4,0.5) drone.play_note(Note.F4,0.5) drone.play_note(Note.G4,0.5) drone.play_note(440,0.5)# 440 Hz is Note.C4 drone.close() Copy","keywords":""},{"title":"get_angle()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-angle","content":"Description# This function gets the roll, pitch, and yaw angles from the gyrometer sensor. Syntax# get_angle() Parameters# None Returns# It returns an Angle class in Python. Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # print the angle values angle = drone.get_angle() print(angle) print(angle.ROLL, angle.PITCH, angle.YAW) drone.close() Copy","keywords":""},{"title":"get_altitude()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-altitude","content":"Description# This is a getter function which returns the current altitude of the drone. It uses air pressure from the barometer sensor to estimate the altitude. This function returns the absolute altitude between the drone's current position and \"sea level\", not the floor. Syntax# get_height() Parameters# None Returns# The current height calculated by the difference between the current and the floor altitude(cm). Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() altitude = drone.get_altitude() print(altitude) drone.close() Copy","keywords":""},{"title":"get_battery_percentage()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-battery-percentage","content":"Description# This function gets the battery percentage of the drone, returning a value from 0 to 100. Syntax# get_battery_percentage() Parameters# None Returns# The battery’s percentage as an integer from 0 - 100. Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() battery = drone.get_battery_percentage() print(battery) drone.close() Copy","keywords":""},{"title":"get_drone_temp()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-drone-temp","content":"Description# This is a getter function gets the drone's temperature from the barometer. The sensor reads the drone’s temperature, not the air around it. Syntax# get_drone_temp() Parameters# None Returns# The temperature in Celsius as an integer. Example Code# Python# #Python code import CoDrone_mini import time drone = CoDrone_mini.CoDrone() drone.pair() # print the temperature time.sleep(1)# to prevent skipping for an accurate reading temperature = drone.get_drone_temp() print(temperature) drone.close() Copy","keywords":""},{"title":"get_height()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-height","content":"Description# This is a getter function which returns the current height of the drone. It checks sea level from the barometer sensor first and then the altitude from the floor right after it is paired. This function returns the distance between the drone's current position and the floor or any surface below from where it took off from. Syntax# get_height() Parameters# None Returns# The current height calculated by the difference between the current and the floor altitude(cm). Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() drone.takeoff() drone.hover(3) height = drone.get_height() print(height) drone.land() drone.close() Copy","keywords":""},{"title":"get_trim()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-trim","content":"Description# This function gets the current trim values of the drone. Syntax# get_trim() Parameters# None Returns# It returns a Trim class in Python Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # print the pressure trim = drone.get_trim() print(trim) print(trim.ROLL, trim.PITCH, trim.YAW, trim.THROTTLE) drone.close() Copy","keywords":""},{"title":"get_pressure()","type":0,"sectionRef":"#","url":"docs/codrone-mini/python/Sensors/get-pressure","content":"Description# This is a getter function that returns the data from the barometer. The function returns a value in the unit Pascals. Note: 1atm = 101325 Pa Syntax# get_pressure() Parameters# None Returns# Float that represents air pressure in Pascals. Example Code# Python# #Python code import CoDrone_mini drone = CoDrone_mini.CoDrone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close() Copy","keywords":""},{"title":"disconnect()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/connection/disconnect","content":"Description# This function disconnects with the drone that you're connected to. Syntax# disconnect() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(1) drone.land() drone.disconnect() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //below this have to code in setup //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.hover(3); CoDrone.land(); CoDrone.disconnect();// disconnects } voidloop(){ } Copy","keywords":""},{"title":"CoDrone Pro Library Changelog","type":0,"sectionRef":"#","url":"docs/codrone-pro/cdm-pro-changelog","content":"Aug 14, 2018 CoDrone Pro Library Reference New Function: pair() : Updated to a new function for pairing with the CoDrone. Pair will pair with the nearest, then save your drone info to your project folder and use the next time you pair with no parameters. calibrate() : you can reset and calibrate drone programmatically. move() function updated. It can take 4 parameters move(roll,pitch,yaw,throttle) to move indefinitely May 21, 2018# CoDrone Version 1.1.2 Print port name and drone name at the start of the program. Solve setAllRGB() function error (couldn't change the colors when repeated it too fast). Mar 28, 2018# CoDrone Version 1.1.1 Change the Mode name Change the default value in flight command Add some error messages for debugging mode Mar 16, 2018# CoDrone Version 1.1.0 Remove \"time.\" in protocol.py Add legacy functions Fix functions about degrees. Dec 16, 2017# CoDrone Version 0.2 The first CoDrone library release for the Python Package Index","keywords":""},{"title":"fly_sequence()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/fly-sequence","content":"Description# This function make drone fly specific shape and hover after finish. The options are square, circle, spiral, triangle, hop, sway, zigzag Syntax# Python: fly_sequence(sequence) Arduino: flySequence(sequence) Parameters# sequence: SQUARE, CIRCLE, SPIRAL, TRIANGLE, HOP, SWAY, ZIGZAG Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Sequence drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.fly_sequence(Sequence.TRIANGLE)# Fly triangle shape drone.fly_sequence(Sequence.SPIRAL)# Fly spiral shape drone.fly_sequence(Sequence.SQUARE)# Fly square shape drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.flySequence(TRIANGLE);// Fly triangle shape CoDrone.flySequence(SPIRAL);// Fly spiral shape CoDrone.flySequence(SQUARE);// Fly square (right -> forward -> left -> backward) CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"pair()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/connection/pair","content":"Description# This function pairs the BLE board to the CoDrone. After establishing a connection, it always waits for 3 seconds before executing the next command. Pair works a bit differently between Arduino and Python. With the Arduino-based remote, pair() with no parameters will pair with the last paired CoDrone. If it's your first time using the remote, it will just find the nearest CoDrone it can find, then \"lock in\" with that CoDrone and always pair with it. With Python, pair() with no parameters will pair with the last paired CoDrone, which is saved in a file called \"PairInfo.\" If it's your first time running pair(), it will just find the nearest CoDrone it can find, then \"lock in\" with that CoDrone, save it to \"PairInfo\" and always pair with it until you run pair(drone.Nearest). Syntax# pair() Arduino: pair(Nearest), Python: pair(drone.Nearest) Arduino: pair(bluetoothAddress), Python: pair(fourDigitAddress) Parameters# Nearest: If you specify Nearest in Arduino or drone.Nearest in Python, it will pair with the first drone it finds (which may not always be the nearest CoDrone, in some cases, just the first CoDrone it finds). This function can be used to \"unlock\" the drone from only pairing with the CoDrone it's been \"locked in\" with. Once you've paired with a nearest CoDrrone, you can run pair() again with no parameters, and it will only pair with the \"locked in\" CoDrone. address: This is the address of the CoDrone. In Arduino, this is a 6-index array of bytes representing the Bluetooth address. In Python, this is the 4-digit number that identifies the CoDrone. Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # drone.pair(“5349”) # drone.pair(drone.Nearest) # you can set specific port name for pairing especially Windows need/require this # drone.pair(port_name = 'COM3') # drone.pair('1234', 'COM3') # drone.pair(drone.Nearest, 'COM3') drone.takeoff() drone.hover(3) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //below this have to code in setup CoDrone.begin(115200); //IMPORATNT: You would only run ONE of the 3 options below /* 1) This will pair with the last drone that the remote was paired to. If this is the first time pairing, * this function will pair with whatever first drone it finds, and \"lock in\" to that drone and only pair with * that drone */ CoDrone.pair(); /* 2) This will pair with the nearest drone that the BLE board finds. You can use this function to \"unlock\" a * remote that's been \"locked in\" to a drone. So first run this code, then just upload and run with \"CoDrone.pair()\" * to \"lock in\" to that drone */ CoDrone.pair(Nearest); } voidloop(){ } Copy","keywords":""},{"title":"go()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/go","content":"Description# A simpler Junior level function that represents positive flight with a direction, but with more natural language. It simply flies in the given direction for the given duration and power. Syntax# go(direction) go(direction, duration) go(direction, duration, power) Parameters# direction: a constant in Arduino and enum in Python. It’s the direction of the flight, which can be one of the following: FORWARD, BACKWARD, LEFT, RIGHT, UP, and DOWN. duration: the duration of the flight motion in seconds. If undefined, defaults to 1 seconds. If duration is 0, it will turn right indefinitely. power: the power at which the drone flies forward. Takes a value from 0 to 100. Defaults to 50 if not defined. Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Direction drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.go(Direction.FORWARD)# Go forward for 1 second at 50% power drone.go(Direction.UP,5)# Go up for 5 seconds at 50% power drone.go(Direction.BACKWARD,3,70)# Go backwards for 3 seconds at 70% power drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.go(FORWARD);// Go forward at 50% power for 1 second CoDrone.go(UP,5);// Go up for 5 seconds at 50% power CoDrone.go(BACKWARD,3,70)// Go backwards for 3 seconds at 70% power } voidloop(){ } Copy","keywords":""},{"title":"go_to_height()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/go-to-height","content":"Description# This is a setter function will make the drone fly to the given height above the object directly below its IR sensor (usually the ground). It’s effective between 20 and 2000 millimeters. It uses the IR sensor to continuously check for its height. Syntax# Python: go_to_height(height) Arduino: goToHeight(height) Parameters# height: An int from 20 to 2000 in millimeters Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Fly 1500mm away from bottom and hover drone.takeoff() drone.go_to_height(1500) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.goToHeight(1000);// Fly 1000mm away from bottom and hover } voidloop(){ } Copy","keywords":""},{"title":"hover()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/hover","content":"Description# This function makes the drone hover for a given amount of time. If you enter a 0 or None, it will hover indefinitely until given a another command. Syntax# hover(duration) Parameters# duration : the duration of the hovering in seconds. Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h> voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff();// take off and hover for 3 second CoDrone.hover(3);// hover for 3 second CoDrone.land();//landing } voidloop(){ } Copy","keywords":""},{"title":"rotate180()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/rotate-180","content":"Description# This function makes the drone rotate 180 degrees. Only rotates in a random direction, because this is a pre-set flight event in the firmware. Syntax# rotate180() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.rotate180() drone.land() drone.close( Copy Arduino# //not yet Copy","keywords":""},{"title":"turn()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/turn","content":"Description# A function that represents yaw, but with more natural language. It simply turns in the given direction, duration and power. Syntax# turn(direction) turn(direction, duration) turn(direction, duration, power) Parameters# direction : a constant in Arduino and enum in Python. It’s the direction of the turn, which can be one of the following: LEFT or RIGHT. duration : the duration of the turn in seconds. If 0, it will turn right indefinitely. Defaults to 1 second if not defined. power : the power at which the drone turns right. Takes a value from 0 to 100. Defaults to 50 if not defined. Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Direction drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.turn(Direction.LEFT)# Turn left for 1 second at -50 power drone.turn(Direction.LEFT,0)# Turn left at -50 power indefinitely drone.turn(Direction.RIGHT,3,100)# Turn right for 3 seconds at 100 power drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.turn(LEFT);// Turn left for 1 second at 50 power CoDrone.turn(LEFT,0);// Turn left at 50 power indefinitely CoDrone.turn(RIGHT,5,100);// Turn right for 5 seconds at 100 power } voidloop(){ } Copy","keywords":""},{"title":"turn_degree()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-movement/turn-degree","content":"Description# A Senior level function that yaws by a given degree in a given direction. This function takes an input degree in an input direction, and turns until it reaches the given degree. In some instances, the drone may turn past the given degree and need to rotate all the way around again before reaching the correct degree. Syntax# Python: turn_degree(direction, degree) Arduino: turnDegree(direction, degree) Parameters# direction : a string that’s either left or right degree : a constant in Arduino and enum in Python. The degree the drone will turn to the right, with its starting position representing 0 degrees,Degree.ANGLE_30, Degree.ANGLE_45, Degree.ANGLE_60, Degree.ANGLE_90, Degree.ANGLE_120, Degree.ANGLE_135, Degree.ANGLE_150, Degree.ANGLE_180, Degree.ANGLE_210, Degree.ANGLE_225, Degree.ANGLE_240, Degree.ANGLE_270, Degree.ANGLE_300, Degree.ANGLE_315, Degree.ANGLE_330 Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Direction,Degree drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.turn_degree(Direction.LEFT, Degree.ANGLE_45)# Turn left 45 degrees drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.turnDegree(LEFT, ANGLE_45);// Turn left 45 degrees } voidloop(){ } Copy","keywords":""},{"title":"emergency_stop()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-start-stop/emergency-stop","content":"Description# This function immediately stops all commands and stops all motors, so the drone will stop flying immediately. The function will also zero-out all of the flight motion variables to 0. Syntax# Python: emergency_stop()Arduino: emergencyStop() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.emergency_stop() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff();// take off and hover for 3 second CoDrone.emergencyStop();// emergency stop } voidloop(){ } Copy","keywords":""},{"title":"land()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-start-stop/land","content":"Description# This function makes the drone stop all commands, hovers, and makes a soft landing where it is. The function will also zero-out all of the flight motion variables to 0. Syntax# land() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() Copy Arduino# //Arduino code //Arduino code #include<CoDrone.h>//header voidsetup(){ //below this have to code in setup //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff();// take off and hover for 3 second CoDrone.hover(3);// hover for 3 second CoDrone.land();//landing } voidloop(){ } Copy","keywords":""},{"title":"takeoff()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-commands-start-stop/take-off","content":"Description# This function makes the drone take off and begin hovering. The drone will always hover for 3 seconds in order to stabilize before it executes the next command. If it receives no command for 8 seconds, it will automatically land. Syntax# takeoff() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.hover(3) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //below this have to code in setup //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff();// take off and hover for 3 second CoDrone.hover(3);// hover for 3 second CoDrone.land();//landing } voidloop(){ } Copy","keywords":""},{"title":"get_pitch()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/get-pitch","content":"Description# This is a getter function that gets the value of the pitch variable. Syntax# Python: get_pitch() Arduino: getPitch() Parameters# None Returns# The power of the pitch variable (int) Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current pitch with getter function print(“Current pitch : ”, drone.get_pitch()) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current pitch value in variable “current_pitch” int current_pitch = CoDrone.getPitch(); } voidloop(){ } Copy","keywords":""},{"title":"get_roll()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/get-roll","content":"Description# This is a getter function that gets the value of the roll variable. Syntax# Python: get_roll() Arduino: getRoll() Parameters# None Returns# The power of the roll variable (int) Example Code# Python# #Python code #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current roll with getter function print(“Current Roll : ”, drone.get_roll()) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current roll value in variable “current_roll” int current_roll = CoDrone.getRoll(); } voidloop(){ } Copy","keywords":""},{"title":"get_throttle()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/get-throttle","content":"Description# This is a getter function that gets the value of the throttle variable. Syntax# Python: get_throttle() Arduino: getThrottle() Parameters# None Returns# The power of the throttle variable (int) Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current throttle with getter function print(“Current throttle : ”, drone.get_throttle()) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current throttle value in variable “current_throttle” int current_throttle = CoDrone.getThrottle(); } voidloop(){ } Copy","keywords":""},{"title":"get_yaw()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/get-yaw","content":"Description# This is a getter function that gets the value of the yaw variable. Syntax# Python: get_yaw() Arduino: getYaw() Parameters# None Returns# The power of the yaw variable (int) Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # Print current yaw with getter function print(“Current yaw : ”, drone.get_yaw()) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // save current yaw value in variable “current_yaw” int current_yaw = CoDrone.getYaw(); } voidloop(){ } Copy","keywords":""},{"title":"move()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/move","content":"Description# You can use this function to create more complex flight movements. With no parameters, move() will just run based on whatever the flight variables have been set to with functions like setPitch() and setThrottle() indefinitely. You can also run it for a certain duration. The function also takes multiple parameters, where you can set roll, pitch, yaw, and throttle all at once. You can run it infinitely with 4 parameters, or you can run it for a given duration with 5 parameters. If the drone is not flying, nothing will happen. Syntax# move(): runs infinitely move(duration) move(roll, pitch, yaw, throttle): runs infinitely move(duration, roll, pitch, yaw, throttle) Parameters# duration: the duration of the flight motion in seconds. If 0, the duration is infinity. roll: the power of the roll, which is an int from -100 to 100 pitch: the power of the pitch, which is an int from -100 to 100 yaw: the power of the yaw, which is an int from -100 to 100 throttle: the power of the throttle, which is an int from -100 to 100 Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() drone.move()# Move indefinitely based on the current value of flight variables drone.move(5)# Move 5 seconds based on the current value of flight variables drone.move(0,0,30,30)# Move up(throttle) and turn left(yaw) indefinitely drone.move(5,0,0,50,50)# Move up(throttle) and turn left(yaw) for 5 seconds drone.land() drone.close() Copy Arduino# #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff();// take off // Move indefinitely with pitch set to 50 CoDrone.setPitch(50); CoDrone.move(); // Move 5 seconds to the right with roll set to 50 CoDrone.setRoll(50); CoDrone.move(5); CoDrone.move(0,0,0,80,80);// Move up(throttle) and turn left(yaw) indefinitely CoDrone.move(5,0,0,80,80);// Move up(throttle) and turn left(yaw) for 5 seconds CoDrone.land();//land } voidloop(){ } Copy","keywords":""},{"title":"set_pitch()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/set-pitch","content":"Description# This is a setter function that allows you to set the pitch variable. Syntax# Python: set_pitch(power) Arduino: setPitch(power) Parameters# power: An int from -100 to 100 that sets the pitch variable. The number represents the direction and power of the output for that flight motion variable. Negative pitch is backwards, positive pitch is forwards. Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_pitch(50) drone.move(1) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setPitch(60);// set pitch power for 60% CoDrone.move(5);// move drone for 5 seconds CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"set_throttle()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/set-throttle","content":"Description# This is a setter function that allows you to set the throttle variable. Syntax# Python: set_throttle(power) Arduino: setThrottle(power) Parameters# power: An int from -100 to 100 that sets the throttle variable. The number represents the direction and power of the output for that flight motion variable. Negative throttle descends, positive throttle ascends. Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone goes up for 1 second with 50 power drone.set_throttle(50) drone.move(1) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setThrottle(60);// set throttle power for 60% CoDrone.move(5);// move drone for 5 seconds CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"set_roll()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/set-roll","content":"Description# This is a setter function that allows you to set the roll variable. Syntax# Python: set_roll(power) Arduino: setRoll(power) Parameters# power: An int from -100 to 100 that sets the roll variable. The number represents the direction and power of the output for that flight motion variable. Negative roll is left, positive roll is right. Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone goes right for 1 second with 50 power drone.set_roll(50) drone.move(1) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setRoll(60);// set roll power for 60% CoDrone.move(5);// move drone for 5 seconds CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"set_yaw()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/flight-variables/set-yaw","content":"Description# This is a setter function that allows you to set the yaw variable. Syntax# Python: set_yaw(power) Arduino: setYaw(power) Parameters# power: An int from -100 to 100 that sets the yaw variable. The number represents the direction and power of the output for that flight motion variable. Negative yaw turns left, positive yaw turns right. Returns# Boolean Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # Drone turns right for 1 second with 50 power drone.set_yaw(50) drone.move(1) drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.takeoff(); CoDrone.setYaw(60);// set yaw power for 60% CoDrone.move(5);// move drone for 5 seconds CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"arm_color()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/arm-color","content":"Description# This function sets the LED color of the arms using RGB values and their brightness with value from 1 - 100. Syntax# Python: arm_color(color, brightness) arm_color(red, green, blue, brightness) Arduino: armColor(color, brightness) armColor(red, green, blue, brightness) Parameters# color: an enum, which can be set using predefined colors out of the list below in \"Example Code\" under \"LED Color Options\" red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light Returns# None Example Code# Python# #Python code #Python code import CoDrone from CoDrone import Color drone = CoDrone.CoDrone() drone.pair() drone.arm_color(Color.Red,100)# set color to red using Color drone.arm_color(255,0,0,100)# set color to red using RGB drone.close() Copy Arduino# /Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.armColor(White,100);// set color to red using Color CoDrone.armColor(255,0,0,100);// set color to red using RGB } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"arm_default_color()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/arm-default-color","content":"Description# This function sets the default LED color of the eyes as well as the mode, so it will remain that color even after powering off and back on. The colors set are using RGB values. Syntax# Python: arm_default_color(red, green, blue, brightness) Arduino: armDefaultColor(red, green, blue, brightness) Parameters# red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default arm color to an RGB of (0, 0, 100) with full brightness drone.arm_default_color(0,0,100,100) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default arm color to an RGB of (0, 120, 155) with full brightness CoDrone.armDefaultColor(0,120,155,100); } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"arm_default_pattern()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/arm-default-pattern","content":"Description# This function sets the default color of the arm LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on. Syntax# Python: arm_default_pattern(color, mode) arm_default_pattern(color, mode, speed) arm_default_pattern(red, green, blue, mode) arm_default_pattern(red, green, blue, mode, speed) Arduino: armDefaultPattern(color, mode) armDefaultPattern(color, mode, speed) armDefaultPattern(red, green, blue, mode) armDefaultPattern(red, green, blue, mode, speed) Parameters# color: an enum, which can be set using predefined colors out of the list below in \"Example Code\" under \"LED Color Options\" red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest. Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default arm pattern to RGB (0, 125, 155) and double blink quickly drone.arm_default_pattern(0,125,155, Mode.DOUBLE_BLINK,10) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default arm pattern to blue using RGB and double blink slowly CoDrone.armDefaultPattern(0,0,100, BLINK,150); } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"arm_off()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/arm-off","content":"Description# This function turns off the arm LEDs Syntax# Python: arm_off() Arduino: armOff() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # turn off the arms drone.arm_off() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.armOff(); } voidloop(){ } Copy","keywords":""},{"title":"arm_pattern()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/arm-pattern","content":"Description# This function sets the color of the arm LED lights to flash in a particular pre-set pattern at a given speed. Syntax# Python: arm_pattern(color, mode) arm_pattern(color, mode, speed) arm_pattern(red, green, blue, mode) arm_pattern(red, green, blue, mode, speed) Arduino: armPattern(color, mode) armPattern(color, mode, speed) armPattern(red, green, blue, mode) armPattern(red, green, blue, mode, speed) Parameters# color: an enum, which can be set using predefined colors out of the list below in \"Example Code\" under \"LED Color Options\" red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING, PULSE, REVERSE_PULSE speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest. Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Mode, Color drone = CoDrone.CoDrone() drone.pair() drone.arm_pattern(Color.Red, Mode.DOUBLE_BLINK,200)# Set arms to double blink red slowly using Color drone.arm_pattern(0,100,0, Mode.PULSE,200)# Set arms to pulse green slowly using RGB drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.armPattern(Red, DOUBLE_BLINK,200);// Set arms to double blink red slowly using Color CoDrone.armPattern(0,0,255, PULSE,200);// Set arms to pulse blue slowly using RGB } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"eye_color()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/eye-color","content":"Description# This function sets the LED color of the arms using RGB values and their brightness with value a from 1 - 100. Syntax# Python: eye_color(color, brightness) eye_color(red, green, blue, brightness) Arduino: eyeColor(color, brightness) eyeColor(red, green, blue, brightness) Parameters# color: an enum, which can be set using predefined colors out of the list below in \"Example Code\" under \"LED Color Options\" red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Color drone = CoDrone.CoDrone() drone.pair() drone.eye_color(Color.Red,100)# set color to red using Color drone.eye_color(255,0,0,100)# set color to red using RGB drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.eyeColor(White,100);// set color to red using Color CoDrone.eyeColor(255,0,0,100);// set color to red using RGB } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"arm_strobe()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/arm-strobe","content":"Description# This function makes the arms to strobe in various colors Syntax# Python: arm_strobe() Arduino: armStrobe() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # strobe the arms drone.arm_strobe() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // strobe the arms CoDrone.armStrobe(); } voidloop(){ } Copy","keywords":""},{"title":"eye_default_color()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/eye-default-color","content":"Description# This function sets the default LED color of the eyes using RGB values and their brightness with a value from 1 - 100. This means the color will remain, even after the CoDrone has been powered off and back on. Syntax# Python: eye_default_color(red, green, blue, brightness) Arduino: eyeDefaultColor(red, green, blue, brightness) Parameters# red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 brightness: in value from 0 to 100, which represents the brightness of the light Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default eye color to an RGB of (0, 0, 100) with full brightness drone.eye_default_color(0,0,100,100) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default eye color to an RGB of (0, 0, 100) with full brightness CoDrone.eyeDefaultColor(0,120,155,100); } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"eye_off()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/eye-off","content":"Description# This function turns off the eye LEDs Syntax# Python: eye_off() Arduino: eyeOff() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # turn off the eyes drone.eye_off() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // turn off the eyes CoDrone.eyeOff(); } voidloop(){ } Copy","keywords":""},{"title":"eye_default_pattern()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/eye-default-pattern","content":"Description# This function sets the default color of the eyes LED lights to flash in a particular pre-set pattern at a given speed, which means the lights will remain in that color and pattern when powered off and back on. Syntax# Python: eye_default_pattern(color, mode) eye_default_pattern(color, mode, speed) eye_default_pattern(red, green, blue, mode) eye_default_pattern(red, green, blue, mode, speed) Arduino: eyeDefaultPattern(color, mode) eyeDefaultPattern(color, mode, speed) eyeDefaultPattern(red, green, blue, mode) eyeDefaultPattern(red, green, blue, mode, speed) Parameters# color: an enum, which can be set using predefined colors out of the list below in \"Example Code\" under \"LED Color Options\" red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING speed: int value from 0-255, which represents the speed of the pattern. 255 is slowest, 0 is fastest Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Mode drone = CoDrone.CoDrone() drone.pair() # set default eye pattern to RGB (0, 125, 155) and double blink slowly drone.eye_default_pattern(0,125,155, Mode.DOUBLE_BLINK,200) drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // set default arm pattern to blue using RGB and blink quickly CoDrone.eyeDefaultPattern(0,0,100, BLINK,20); } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"eye_strobe()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/eye-strobe","content":"Description# This function makes the arms to strobe in various colors Syntax# Python: eye_strobe() Arduino: eyeStrobe() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # strobe the eyes drone.eye_strobe() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // strobe the eyes CoDrone.eyeStrobe(); } voidloop(){ } Copy","keywords":""},{"title":"eye_pattern()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/eye-pattern","content":"Description# This function sets the color of the eye LED lights to flash in a particular pre-set pattern at a given speed. Syntax# Python: eye_pattern(color, mode) eye_pattern(color, mode, speed) eye_pattern(red, green, blue, mode) eye_pattern(red, green, blue, mode, speed) Arduino: eyePattern(color, mode) eyePattern(color, mode, speed) eyePattern(red, green, blue, mode) eyePattern(red, green, blue, mode, speed) Parameters# color: an enum, which can be set using predefined colors out of the list below in \"Example Code\" under \"LED Color Options\" red: int value from 0 to 255 green: int value from 0 to 255 blue: int value from 0 to 255 mode: an enum, which can be selected from the following predefined list: BLINK, DOUBLE_BLINK, DIMMING speed: int value from 0 - 255, which represents the speed of the pattern. 255 is slowest, 0 is fastest. Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Color, Mode drone = CoDrone.CoDrone() drone.pair() drone.eye_pattern(Color.Red, Mode.BLINK,1)# Set eyes to blink red slowly using Color drone.eye_pattern(255,0,0, Mode.DIMMING,200)# Set eyes to dim red slowly using RGB drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); CoDrone.eyePattern(Red, DOUBLE_BLINK,1);// Set eyes to double blink red quickly using Color CoDrone.eyePattern(255,0,0, DOUBLE_BLINK,10);// Set eyes to double blink red quickly using RGB } voidloop(){ } Copy LED Color options# AliceBlue, AntiqueWhite, Aqua, Aquamarine, Azure, Beige, Bisque, Black, BlanchedAlmond, Blue, BlueViolet, Brown, BurlyWood, CadetBlue, Chartreuse, Chocolate, Coral, CornflowerBlue, Cornsilk, Crimson, Cyan, DarkBlue, DarkCyan, DarkGoldenRod, DarkGray, DarkGreen, DarkKhaki, DarkMagenta, DarkOliveGreen, DarkOrange, DarkOrchid, DarkRed, DarkSalmon, DarkSeaGreen, DarkSlateBlue, DarkSlateGray, DarkTurquoise, DarkViolet, DeepPink, DeepSkyBlue, DimGray, DodgerBlue, FireBrick, FloralWhite, ForestGreen, Fuchsia, Gainsboro, GhostWhite, Gold, GoldenRod, Gray, Green, GreenYellow, HoneyDew, HotPink, IndianRed, Indigo, Ivory, Khaki, Lavender, LavenderBlush, LawnGreen, LemonChiffon, LightBlue, LightCoral, LightCyan, LightGoldenRodYellow, LightGray, LightGreen, LightPink, LightSalmon, LightSeaGreen, LightSkyBlue, LightSlateGray, LightSteelBlue, LightYellow, Lime, LimeGreen, Linen, Magenta, Maroon, MediumAquaMarine, MediumBlue, MediumOrchid, MediumPurple, MediumSeaGreen, MediumSlateBlue, MediumSpringGreen, MediumTurquoise, MediumVioletRed, MidnightBlue, MintCream, MistyRose, Moccasin, NavajoWhite, Navy, OldLace, Olive, OliveDrab, Orange, OrangeRed, Orchid, PaleGoldenRod, PaleGreen, PaleTurquoise, PaleVioletRed, PapayaWhip, PeachPuff, Peru, Pink, Plum, PowderBlue, Purple, RebeccaPurple, Red, RosyBrown, RoyalBlue, SaddleBrown, Salmon, SandyBrown, SeaGreen, SeaShell, Sienna, Silver, SkyBlue, SlateBlue, SlateGray, Snow, SpringGreen, SteelBlue, Tan, Teal, Thistle, Tomato, Turquoise, Violet, Wheat, White, WhiteSmoke, Yellow, YellowGreen, EndOfColor Copy","keywords":""},{"title":"reset_default_led()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/led/reset-default-led","content":"Description# This function sets the LED color of the eyes and arms back to red and sets the mode to SOLID, which is the original default color. Syntax# Python: reset_default_led() Arduino: resetDefaultLED() Parameters# None Returns# None Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.reset_default_led() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // Reset Drone’s LED to holding the Red color CoDrone.resetDefaultLED(); } voidloop(){ } Copy","keywords":""},{"title":"get_accelerometer()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-accelerometer","content":"Description# This function gets the accelerometer sensor data, which returns x, y, and z. It outputs to the UI in Blockly and as a class in Python as a struct in Arduino. Syntax# Python: get_accelerometer() Arduino: getAccelerometer() Parameters# None Returns# Outputs to visual UI. In code, it returns a class in Python and struct in Arduino. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the acceleration of drone acceleration = drone.get_accelerometer() print(acceleration.X, acceleration.Y, acceleration.Z) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ // Struct for get accelerometer data acceldata accel; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active accel = CoDrone.getAccelerometer();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"accel x : \\t\"); Serial.println(accel.x); Serial.print(\"accel y : \\t\"); Serial.println(accel.y); Serial.print(\"accel z : \\t\"); Serial.println(accel.z); } Copy","keywords":""},{"title":"get_angular_speed()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-angular-speed","content":"Description# This function gets the data from the gyrometer sensor for the roll, pitch, and yaw angular speed. Syntax# Python: get_angular_speed() Arduino: getAngularSpeed() Parameters# None Returns# Output to visual UI. In code, it returns a class in Python and struct in Arduino. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the angular speed of drone gyrodata = drone.get_angular_speed() print(gyrodata.ROLL, gyrodata.PITCH, gyrodata.YAW) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ // Struct for get Angular speed(gyro) data gyrodata gyro; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active gyro = CoDrone.getAngularSpeed();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"gyro roll : \\t\"); Serial.println(gyro.roll); Serial.print(\"gyro pitch : \\t\"); Serial.println(gyro.pitch); Serial.print(\"gyro yaw : \\t\"); Serial.println(gyro.yaw); } Copy","keywords":""},{"title":"get_battery_percentage()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-battery-percentage","content":"Description# This function gets the battery percentage of the drone, returning a value from 0 to 100. Syntax# Python: get_battery_percentage() Arduino: getBatteryPercentage() Parameters# None Returns# The battery’s percentage as an integer from 0 - 100. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # stop the drone if battery is lower than 10 percent. battery = drone.get_battery_percentage() if battery <10: drone.emergency_stop() drone.land() drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ int batteryPercentage; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active batteryPercentage = CoDrone.getBatteryPercentage();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"batteryPercentage : \\t\"); Serial.println(batteryPercentage); } Copy","keywords":""},{"title":"get_battery_voltage()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-battery-voltage","content":"Description# This function gets the voltage of the battery Syntax# Python: get_battery_voltage() Arduino: getBatteryVoltage() Parameters# None Returns# The voltage of the battery as an a float Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the battery voltage of drone. battery = drone.get_battery_voltage() print(battery) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ int batteryVoltage; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active batteryVoltage = CoDrone.getBatteryVoltage();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"batteryVoltage : \\t\"); Serial.println(batteryVoltage); } Copy","keywords":""},{"title":"get_drone_temp()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-drone-temp","content":"Description# This is a getter function gets the data from the drone’s temperature sensor. Importantly, it reads the drone’s temperature, not the air around it. Syntax# Python: get_drone_temp() Arduino: getDroneTemp() Parameters# None Returns# The temperature in celsius as an integer. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() ## print the temperature of drone temperature = drone.get_drone_temp() print(temperature) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ int temperature; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active temperature = CoDrone.getDroneTemp();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"temperature : \\t\"); Serial.println(temperature); } Copy","keywords":""},{"title":"get_gyro_angles()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-gyro-angles","content":"Description# This function gets the data from the gyrometer sensor to determine the roll, pitch, and yaw as angles. Syntax# Python: get_gyro_angles() Arduino: getGyroAngles() Parameters# None Returns# Outputs to visual UI. In code, it returns a class in Python and struct in Arduino. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the angles of drone GyroAngles = drone.get_gyro_angles() print(GyroAngles.ROLL, GyroAngles.PITCH, GyroAngles.YAW) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ // Struct for get angles(attitude) data angledata angle; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active angle = CoDrone.getGyroAngles();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"angle roll : \\t\"); Serial.println(angle.roll); Serial.print(\"angle pitch : \\t\"); Serial.println(angle.pitch); Serial.print(\"angle yaw : \\t\"); Serial.println(angle.yaw); } Copy","keywords":""},{"title":"get_height()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-height","content":"Description# This is a getter function gets the current height of the drone from the object directly below its IR sensor. Syntax# Python: get_height() Arduino: getHeight() Parameters# None Returns# The current height above the object directly below the drone’s IR height sensor as an int(mm). Example Code# Python# #Python code import CoDrone from CoDrone import Direction import time drone = CoDrone.CoDrone() drone.pair() drone.takeoff() # fly between 500mm and 1000mm for i inrange(200): height = drone.get_height() if height >1000: drone.go(Direction.DOWN) elif height <500: drone.go(Direction.UP) time.sleep(0.1) drone.land() drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ int height; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active height = CoDrone.getHeight();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"height : \\t\"); Serial.println(height); } Copy","keywords":""},{"title":"get_opt_flow_position()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-opt-flow-position","content":"Description# This function gets the x and y coordinates from the optical flow sensor. Keep in mind, the positioning does not take rotation into account. Syntax# Python: get_opt_flow_position() Arduino: getOptFlowPosition() Parameters# None Returns# Outputs to visual UI. In code, it returns a class in Python and struct in Arduino. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the optical flow position x,y value position = drone.get_opt_flow_position() print(position.X, position.Y) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ // Struct for get optical flow sensor data optdata opt; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active opt = CoDrone.getOptFlowPosition();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"opt x : \\t\"); Serial.println(opt.x); Serial.print(\"opt y : \\t\"); Serial.println(opt.y); } Copy","keywords":""},{"title":"get_pressure()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-pressure","content":"Description# This is a getter function gets the data from the barometer sensor. Syntax# Python: getPressure() Arduino: getPressure() Parameters# None Returns# The barometer’s air pressure in milibars at (0.13 resolution). Example Code# Python# Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # print the pressure pressure = drone.get_pressure() print(pressure) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ int pressure; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active pressure = CoDrone.getPressure();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"pressure : \\t\"); Serial.println(pressure); } Copy","keywords":""},{"title":"get_state()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-state","content":"Description# This function gets the state of the drone, as in whether it’s: ready, takeoff, flight, flip, stop, landing, reverse, accident, error. Syntax# Python: get_state() Arduino: getState() Parameters# None Returns# In Blockly, output to UI. In Python, return String(READY, TAKE_OFF, FLIGHT, FLIP, STOP, LANDING, REVERSE, ACCIDENT, ERROR). In Arduino, return enum value(fMode_Ready, fMode_TakeOff, fMode_Flight, fMode_Flip, fMode_Stop, fMode_Landing, fMode_Reverse, fMode_Accident, fMode_Error). Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # take off the drone if state is not on flight state = drone.get_state() if state !=\"FLIGHT\": drone.takeoff() drone.hover(3) drone.land() drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); int state; trim = CoDrone.getState();//save request data delay(50); if(state = fMode_Ready) CoDrone.takeoff(); CoDrone.hover(3); CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"get_trim()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/get-trim","content":"Description# This function gets the current trim values of the drone. Syntax# Python: get_trim() Arduino: getTrim() Parameters# None Returns# Outputs to visual UI. In code, it returns a class in Python and struct in Arduino. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() #print current drone's trim value trim = drone.get_trim() print(trim.ROLL, trim.PITCH, trim.YAW, trim.THROTTLE) drone.close() Copy Arduino# //Arduino code //Code for print request data to serial monitor #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); } voidloop(){ // Struct for get trim data trimdata trim; CoDrone.Send_LinkModeBroadcast(LinkBroadcast_Active);//link module mode change => Active trim = CoDrone.getTrim();//save request data delay(100); CoDrone.Send_LinkModeBroadcast(LinkModeMute);//link module mode change => Mute delay(100); Serial.println(\"\"); Serial.println(\"--------- Now -----------\"); Serial.print(\"trim roll : \\t\"); Serial.println(trim.roll); Serial.print(\"trim pitch : \\t\"); Serial.println(trim.pitch); Serial.print(\"trim yaw : \\t\"); Serial.println(trim.yaw); Serial.print(\"trim throttle : \\t\"); Serial.println(trim.throttle); } Copy","keywords":""},{"title":"set_plot_sensor()/draw_plot_sensor()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/sensors/set-plot-sensor","content":"Description# This function is used for drawing sensor data. The function should be used in pairs, with set_plot_sensor() starting the recording process, and draw_plot_sensor() doing the actual drawing process. You can plot the height sensor, the temperature sensor, the gyro angles, gyro raw sensor values, the image flow sensor, and the accelerometer sensor. Syntax# Python: set_plot_sensor(sensor)/draw_plot_sensor() Parameters# sensor: PlotType.height, PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel Returns# The voltage of the battery as an a float Example Code# Python# #Python code import CoDrone from CoDrone.protocol import PlotType import time drone= CoDrone.CoDrone() drone.pair(drone.Nearest) # set up sensor for ploting. It will grab sensor data every second drone.set_plot_sensor(PlotType.height) # drone.set_plot_sensor(PlotType.height, PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel) #PlotType.angle, PlotType.temperature, PlotType.gyro, PlotType.image_flow, PlotType.accel drone.takeoff() time.sleep(5) drone.land() drone.draw_plot_sensor() drone.close() Copy","keywords":""},{"title":"is_flying()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/status-checkers/is-fliying","content":"Description# This function checks whether the drone is flying and returns a boolean Syntax# Python: is_flying() Arduino: isFlying() Parameters# None Returns# Boolean of whether the drone is flying Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() drone.takeoff() #land if flying. if drone.is_flying(): drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // If drone is flying land the drone if(CoDrone.isFlying()==true) CoDrone.land(); } voidloop(){ } Copy","keywords":""},{"title":"is_ready_to_fly()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/status-checkers/is-ready-to-fly","content":"Description# This function checks whether the drone is ready to fly by returning a boolean. The drone is ready to fly if it is oriented right-side up, and not flying. Syntax# Python: is_ready_to_fly() Arduino: isReadyToFly() Parameters# None Returns# Boolean of whether the drone is ready to fly. Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() #land if flying. if drone.is_ready_to_fly(): drone.takeoff() drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); // if drone is ready to fly, take off the drone if(CoDrone.isReadyToFly()== true) CoDrone.takeoff() } voidloop(){ } Copy","keywords":""},{"title":"is_upside_down()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/status-checkers/is-upside-down","content":"Description# This function checks whether the drone is upside-down and returns a boolean Syntax# Python: is_upside_down() Arduino: isUpsideDown() Parameters# None Returns# Boolean of whether the drone is upside-down Example Code# Python# #Python code import CoDrone drone = CoDrone.CoDrone() drone.pair() # takeoff when drone isn’t upside down ifnot drone.is_upside_down(): drone.takeoff() drone.land() drone.close() Copy Arduino# //Arduino code #include<CoDrone.h>//header voidsetup(){ //open serial and connect CoDrone.begin(115200); CoDrone.pair(Nearest); if(CoDrone.isUpsideDown()==false)// if drone is not upside down take off the drone CoDrone.takeoff(); } voidloop(){ } Copy","keywords":""},{"title":"on_low_battery()","type":0,"sectionRef":"#","url":"docs/codrone-pro/python/status-checkers/on-low-battery","content":"Description# Add callback function when CoDrone battery percentage is lower than 50% Syntax# Python: on_low_battery(function) Arduino: onLowBattery(function) Parameters# call back function Returns# None Example Code# Python# #Python code import CoDrone from CoDrone import Mode # define function for change drone's arm LED green defset_arm_green(): drone.set_arm_LED(0,255,0, Mode.SOLID) drone = CoDrone.CoDrone() drone.pair() #set eventhandler to run self-defined \"set_arm_green\" function drone.on_low_battery(set_arm_green) drone.close() Copy Arduino# //Arduino code //Not support Copy","keywords":""},{"title":"Powered by MDX","type":0,"sectionRef":"#","url":"docs/mdx","content":"You can write JSX and use React components within your Markdown thanks to MDX. Docusaurus green and Facebook blue are my favorite colors. I can write Markdown alongside my JSX!","keywords":""},{"title":"Zumi Library","type":0,"sectionRef":"#","url":"docs/zumi/_column2","content":"These are the functions that you can use to control the Zumi. The functions are available in Python library. Example code is provided in each function definition. #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(\"Done\") Copy","keywords":""},{"title":"Zumi Library","type":0,"sectionRef":"#","url":"docs/zumi/_test","content":"These are the functions that you can use to control the Zumi. The functions are available in Python library. Example code is provided in each function definition. #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(\"Done\") Copy","keywords":""},{"title":"Zumi Library Changelog","type":0,"sectionRef":"#","url":"docs/zumi/blockly/changelog","content":"","keywords":""},{"title":"capture()","type":0,"sectionRef":"#","url":"docs/zumi/python/Camera/capture","content":"Description# Takes a picture using the PiCamera and saves it in an array. Syntax# capture() Parameters# None Returns# Numpy array representing captured image (type: ndarray) Example Code# Python# #Python code from zumi.util.camera import Camera import time camera=Camera() camera.start_camera() frame = camera.capture() camera.show_image(frame) time.sleep(5) camera.close() Copy","keywords":""},{"title":"close()","type":0,"sectionRef":"#","url":"docs/zumi/python/Camera/close","content":"Description# Releases camera's resources Syntax# close() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.save_photo() camera.close() Copy","keywords":""},{"title":"save_photo()","type":0,"sectionRef":"#","url":"docs/zumi/python/Camera/save-photo","content":"Description# Captures an image and saves it in the working directory. Syntax# save_photo() save_photo(file_name) Parameters# file_name (type: string, defalt: current_time) : The name of the image file that will be saved Returns# None Example Code# Python# #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.save_photo() #\"<current_time>.jpg\" file will be saved in the current working directory camera.save_photo(\"Cheese\") #\"Cheese.jpg\" file will be saved in the current working directory camera.close() Copy","keywords":""},{"title":"is_closed()","type":0,"sectionRef":"#","url":"docs/zumi/python/Camera/is-close","content":"Description# Checks if the camera stream is open Syntax# is_closed() Parameters# None Returns# Boolean (type: boolean) Example Code# Python# #Python code from zumi.util.camera import Camera camera=Camera() camera.start_camera() camera.close() print(\"Camera is closed?\") print(camera.is_closed()) ifnot camera.is_closed(): camera.close() Copy","keywords":""},{"title":"show_image()","type":0,"sectionRef":"#","url":"docs/zumi/python/Camera/show-image","content":"Description# Displays an image taken from Zumi's camera. Syntax# show_image(frame) Parameters# frame: An image array Returns# None Example Code# Python# #Python code from zumi.util.camera import Camera import time camera=Camera() camera.start_camera() frame = camera.capture() camera.show_image(frame) camera.close() Copy","keywords":""},{"title":"start_camera()","type":0,"sectionRef":"#","url":"docs/zumi/python/Camera/start-camera","content":"Description# Turns on the camera Syntax# start_camera() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.camera import Camera import cv2 import IPython.display import PIL.Image from io import BytesIO import time # you can change the resolution of the camera # using the image_w = image width # and the image_h = image heigth #camera = Camera(image_w=1280,image_h=960) #camera = Camera(image_w=1024,image_h=768) #camera = Camera(image_w=128,image_h=64) camera = Camera(image_w=60,image_h=32) camera.start_camera() time_start = time.time() try: for i inrange(30): frame = camera.capture() img = PIL.Image.fromarray(frame,\"RGB\") buffer= BytesIO() img.save(buffer,format=\"JPEG\") IPython.display.display(IPython.display.Image(data=buffer.getvalue())) IPython.display.clear_output(wait=True) finally: print(30/(time.time()-time_start)) Copy","keywords":""},{"title":"Zumi Library Changelog","type":0,"sectionRef":"#","url":"docs/zumi/python/changelog","content":"Aug 14, 2018 Zumi Reference New Function: pair() : Updated to a new function for pairing with the CoDrone. Pair will pair with the nearest, then save your drone info to your project folder and use the next time you pair with no parameters. calibrate() : you can reset and calibrate drone programmatically. move() function updated. It can take 4 parameters move(roll,pitch,yaw,throttle) to move indefinitely May 21, 2018# CoDrone Version 1.1.2 Print port name and drone name at the start of the program. Solve setAllRGB() function error (couldn't change the colors when repeated it too fast). Mar 28, 2018# CoDrone Version 1.1.1 Change the Mode name Change the default value in flight command Add some error messages for debugging mode Mar 16, 2018# CoDrone Version 1.1.0 Remove \"time.\" in protocol.py Add legacy functions Fix functions about degrees. Dec 16, 2017# CoDrone Version 0.2 The first CoDrone library release for the Python Package Index","keywords":""},{"title":"circle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/circle","content":"Description# Drives Zumi in a circle (counterclockwise by default). Syntax# circle() circle(speed=30, step=2, direction=1, delay=0.02) Parameters# speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns) direction: -1 for clockwise and +1 for counterclockwise delay: The time delay between each angle step Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle(speed=60, step=4, direction=-1) Copy","keywords":""},{"title":"circle_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/circle-left","content":"Description# Drives Zumi in a counterclockwise circle. Syntax# circle_left() circle_left(speed=30, step=2) Parameters# speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle_left(step=3) Copy","keywords":""},{"title":"circle_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/circle-right","content":"Description# Drives Zumi in a clockwise circle. Syntax# circle_right() circle_right(speed=30, step=2) Parameters# speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.circle_right(step=3) Copy","keywords":""},{"title":"control_motors()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/control-motors","content":"Description# Sets the speed of each individual motor. The changes take place immediately. This function does not include a stop command or any sensor feedback. Syntax# control_motors(right,left) Parameters# right: Integer between -126 and 127. Positive values for forward, negative values for reverse. left: Integer between -126 and 127. Positive values for forward, negative values for reverse. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.control_motors(30,30) time.sleep(2) zumi.stop() Copy","keywords":""},{"title":"drive_over_markers()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/drive-over-markers","content":"Description# Zumi will drive over the specified number of alternating black and white horizontal lines at least 2 centimeters wide. Zumi will stop when the number of markers have been crossed or if the timeout ends, whichever is first. (Avoid making the speed very high, zumi will most likely overshoot since it has a lot of speed) Syntax# zumi.drive_over_markers(5) ```<br /> ##### Parameters road_markers: The number of road markers to drive over<br /> speed: Positive integer value for speed between 0 and 80<br /> ir_threshold: The IR threshold value for the bottom left IR sensors to detect black or white.<br /> time_out: Number of seconds before the timeout ends and Zumi stops driving.<br /> ##### Returns None ##### Example Code ###### Python ```python #Python code from zumi.zumi import Zumi zumi = Zumi() #must start off in a black area. zumi.drive_over_markers(5) #Drive over 10 road marker with a timeout of 6 seconds zumi.drive_over_markers(road_markers=10,speed=30,time_out=6) Copy","keywords":""},{"title":"figure_8()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/figure-8","content":"Description# Drives Zumi in a figure 8. Syntax# figure_8() figure_8(speed=30, step=3, delay=0.02) Parameters# speed: Drive speed between 0-80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.figure_8(step=5) Copy","keywords":""},{"title":"forward()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/forward","content":"Description# Drives Zumi forward at a default speed of 40 for 1 second in the direction Zumi is currently facing. Syntax# forward() forward(speed=40, duration=1.0, desired_angle=None) Parameters# speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive forward desired_angle: Heading or desired angle to drive in (When None is selected Zumi drives wherever she is facing) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.forward() time.sleep(1) zumi.forward(speed=50) time.sleep(1) zumi.forward(duration=2.1) time.sleep(1) Copy","keywords":""},{"title":"forward_avoid_collision()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/forward-avoid-colission","content":"Description# Drives Zumi forward at a default speed of 40 for 1 second in the direction Zumi is currently facing. If either of the front IR sensor values go below the threshold, Zumi will stop even if the duration or timeout is not complete. Syntax# forward_avoid_collision(speed=40, duration=1.0) forward_avoid_collision(speed=40, duration=1.0, desired_angle=None, left_th=150, right_th=150) Parameters# speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive and check for collision desired_angle: Heading or desired angle (Default to None which is Zumi's current heading) left_th: threshold of the front left IR sensor right_th: threshold of the front right IR sensor Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.forward_avoid_collision(40,2) Copy","keywords":""},{"title":"forward_step()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/forward-step","content":"Description# Takes one drive \"step\" to correct for the set heading. This function only works when called inside of a loop. Syntax# forward_step(speed, desired_angle) forward_step(speed, desired_angle, max_speed=127) Parameters# speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,200): zumi.forward_step(80,0) zumi.stop() Copy","keywords":""},{"title":"funnel_align()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/funnel-align","content":"Description# Zumi will try to align to the funnel piece on the competition field (Click here for a PDF version). Syntax# funnel_align(speed=20, duration=1.0) funnel_align(speed=20, duration=1, angle=None, angle_adj=2, l_th=100, r_th=100) Parameters# speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will try to align to the funnel piece angle: Heading or desired angle (Default to None which is Zumi's current heading) angle_adj: The number of degrees Zumi will turn if one IR sensor detects white l_th: threshold of the bottom left IR sensor r_th: threshold of the bottom right IR sensor Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.funnel_align(speed=10,duration=3,angle_adj=1.1) Copy","keywords":""},{"title":"go_reverse()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/go-reverse","content":"Description# Takes one drive \"step\" in reverse to correct for the set heading. This function only works when called inside of a loop. Syntax# go_reverse(speed, desired_angle) go_reverse(speed, desired_angle, max_speed=127) Parameters# speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,200): zumi.go_reverse(40,0) zumi.stop() Copy","keywords":""},{"title":"go_straight()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/go-straight","content":"Description# Takes one drive \"step\" to correct for the set heading. This function only works when called inside of a loop. Syntax# go_straight(speed, desired_angle) go_straight(speed, desired_angle, max_speed=127) Parameters# speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,200): zumi.go_straight(40,0) zumi.stop() Copy","keywords":""},{"title":"j_turn()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/j-turn","content":"Description# Drives Zumi in a j-turn. Syntax# j_turn() j_turn(speed=80, step=4, delay=0.005) Parameters# speed: Positive value for forward speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.j_turn(speed=60, delay=0.003) Copy","keywords":""},{"title":"line_follow_gyro_assist()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/line-follow-gyro-assist","content":"Description# Drives Zumi forward at a default speed of 20 for 1 second in the direction Zumi is currently facing. Zumi will stop when the duration or timeout is over. If the bottom IR sensors detect a black line, Zumi will continue to drive. If one or the other sensor detects white, Zumi will auto-adjust to stay on the line. If both sensors detect white, Zumi will stop even if the duration has not been met. Syntax# line_follow_gyro_assist(speed=20, duration=1.0) line_follow_gyro_assist(speed=20, duration=1, angle=None, angle_adj=2, l_th=100, r_th=100) Parameters# speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive on the line angle: Heading or desired angle (default is None which is Zumi's current heading) angle_adj: The number of degrees Zumi will turn if one IR sensor detects white. l_th: threshold of the bottom left IR sensor. r_th: threshold of the bottom right IR sensor. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.line_follow_gyro_assist(speed=10,duration=3,angle_adj=1.1) Copy","keywords":""},{"title":"left_u_turn()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/left-u-turn","content":"Description# Drives Zumi in a left u-turn. Syntax# left_u_turn() left_u_turn(speed=30, step=4, delay=0.02) Parameters# speed: Positive value for forward speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.left_u_turn() time.sleep(1) zumi.left_u_turn(step=3) Copy","keywords":""},{"title":"move_inches()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/move-inches","content":"Description# This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where: y is the distance traveledm is the predicted speed in inches per secondx is the time elapsedb is the slope intercept If the PID values are not set the internal default values will be set. If the angle is not input Zumi will drive to whatever angle it is currently facing. Syntax# move_inches(distance, angle) move_inches(distance, angle=None, k_p=None, k_i=None, k_d=None) Parameters# distance: the distance in inches you want to travel angle: heading (0 degrees is defined when the Zumi object is created.) Default to None k_p: P-gain. Default to None. k_i: I-gain. Default to None. k_d: D-gain. Default to None. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_inches(5) zumi.move_inches(6,90) zumi.move_inches(5,0) Copy","keywords":""},{"title":"move_centimeters()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/move-centimeters","content":"Description# This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where: y is the distance traveledm is the predicted speed in centimeters per secondx is the time elapsedb is the slope intercept If the PID values are not set the internal default values will be set. If the angle is not input Zumi will drive to whatever angle it is currently facing. Syntax# move_centimeters(distance, angle) move_centimeters(distance, angle=None, k_p=None, k_i=None, k_d=None) Parameters# distance: the distance in centimeters you want to travel angle: heading (0 degrees is defined when the Zumi object is created.) Default to None k_p: P-gain. Default to None. k_i: I-gain. Default to None. k_d: D-gain. Default to None. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_centimeters(10) zumi.move_centimeters(10,90) zumi.move_centimeters(15,0) Copy","keywords":""},{"title":"move_to_coordinate()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/move-to-coordinate","content":"Description# This method drives Zumi from an origin to an x,y position in inches. Using this function will keep track of Zumi's coordinates. To reset the origin, use the reset_coordinate() function. This method uses a best fit linear approximation of the distance traveled over time. It uses the equation y = mx + b, where: y is the distance traveledm is the predicted speed in centimeters per secondx is the time elapsedb is the slope intercept Syntax# move_to_coordinate(desired_x, desired_y) ```<br /> ##### Parameters desired_x: The x-coordinate of the destination<br /> desired_y: The y-coordinate of the destination<br /> k_p: P-gain. Default to None.<br /> k_i: I-gain. Default to None.<br /> k_d: D-gain. Default to None.<br /> units: Defaults to \"in\" or inches. Set it to \"cm\" for centimeters.<br /> ##### Returns None ##### Example Code ###### Python Sample 1 ```python #Python code from zumi.zumi import Zumi zumi = Zumi() # a square zumi.move_to_coordinate(6,0) zumi.move_to_coordinate(6,6) zumi.move_to_coordinate(0,6) zumi.move_to_coordinate(0,0) Copy Python Sample 2# #Python code from zumi.zumi import Zumi import time zumi = Zumi() # Avoid this zumi.move_to_coordinate(10,0) time.sleep(1) # zumi wont drive the second time since its already at (10, 0) zumi.move_to_coordinate(10,0) Copy Python Sample 3# #Python code from zumi.zumi import Zumi import time zumi = Zumi() # Avoid this zumi.move_to_coordinate(10,0) time.sleep(1) zumi.reset_coordinate() # zumi will drive the second time since its position will be reset, and will move a total of 20 inches from the start zumi.move_to_coordinate(10,0) Copy","keywords":""},{"title":"parallel_park()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/paralllel-park","content":"Description# Drives Zumi in a parallel park maneuver. Syntax# parallel_park() parallel_park(speed=15, step=1, delay=0.01) Parameters# speed: Drive speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.parallel_park(speed=20, step=2) Copy","keywords":""},{"title":"rectangle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/rectangle","content":"Description# Drives Zumi in a rectangle. Syntax# rectangle() rectangle(speed=40, seconds=1.0, direction=1, ratio=2) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds for shorter side direction: 1 for counterclockwise and -1 for clockwise ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle(ratio=3) Copy","keywords":""},{"title":"rectangle_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/rectangle-left","content":"Description# Drives Zumi in a counterclockwise rectangle. Syntax# rectangle_left() rectangle_left(speed=40, seconds=1.0, ratio=2) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds for shorter side ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle_left(ratio=3) Copy","keywords":""},{"title":"rectangle_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/rectangle-right","content":"Description# Drives Zumi in a clockwise rectangle. Syntax# rectangle_right() rectangle_right(speed=40, seconds=1.0, ratio=2) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds for shorter side ratio: Ratio of longer side to shorter side (Multiply ratio by seconds to get the duration of the longer side) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.rectangle_right(ratio=3) Copy","keywords":""},{"title":"reset_coordinate()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/reset-coordinate","content":"Description# Will reset the coordinate to (0,0). Syntax# reset_coordinate() Parameters# None Returns# None Example Code# Python Sample 1# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.move_to_coordinate(10,0) zumi.reset_coordinate() #zumi will drive another 10 inches zumi.move_to_coordinate(10,0) Copy","keywords":""},{"title":"reverse()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/reverse","content":"Description# Drives Zumi in reverse at a default speed of 40 for 1 second in the direction Zumi is currently facing. Syntax# reverse() reverse(speed=40, duration=1.0, desired_angle=None) Parameters# speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive reverse desired_angle: Heading or desired angle to drive in (When None is selected Zumi drives wherever she is facing) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.reverse() time.sleep(1) zumi.reverse(speed=50) time.sleep(1) zumi.reverse(duration=2.1) time.sleep(1) Copy","keywords":""},{"title":"reverse_avoid_collision()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/reverse-avoid-collision","content":"Description# Drives Zumi in reverse at a default speed of 40 for 1 second in the direction Zumi is currently facing. If either of the back IR sensor values go below the threshold, Zumi will stop even if the duration or timeout is not complete. Syntax# reverse_avoid_collision(speed=40, duration=1.0) reverse_avoid_collision(speed=40, duration=1.0, desired_angle=None, left_th=150, right_th=150) Parameters# speed: Positive integer value for speed between 0 and 80 duration: Number of seconds Zumi will drive and check for collision desired_angle: Heading or desired angle (Default to None which is Zumi's current heading) left_th: threshold of the back left IR sensor right_th: threshold of the back right IR sensor Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.reverse_avoid_collision(40,2) Copy","keywords":""},{"title":"reverse_step()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/reverse-step","content":"Description# Takes one drive \"step\" in reverse to correct for the set heading. This function only works when called inside of a loop. Syntax# reverse_step(speed, desired_angle) reverse_step(speed, desired_angle, max_speed=127) Parameters# speed: Drive speed between 0 and 127; must be below the max_speed desired_angle: heading (0 degrees is defined when the Zumi object is created.) max_speed: Caps the max speed. Default to 127. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,200): zumi.reverse_step(80,0) zumi.stop() Copy","keywords":""},{"title":"right_u_turn()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/right-u-turn","content":"Description# Drives Zumi in a right u-turn. Syntax# right_u_turn() right_u_turn(speed=30, step=4, delay=0.02) Parameters# speed: Positive value for forward speed between 0 and 80 step: The angle step size (decrease for wider turns, increase for tighter turns) delay: The time delay between each angle step. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.right_u_turn(speed=20) time.sleep(1) zumi.right_u_turn(delay=0.04) Copy","keywords":""},{"title":"smooth_forward()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/smooth-forward","content":"Description# Causes Zumi to gradually accelerate forward to max speed during a given duration before decelerating back to zero. Syntax# smooth_forward(duration) smooth_forward(duration, rate=1) Parameters# duration: Total duration of drive command including acceleration and deceleration rate: rate at which speed changes. Default to 1 Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_forward(3) time.sleep(1) zumi.smooth_forward(duration=3,rate=2) Copy","keywords":""},{"title":"smooth_reverse()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/smooth-reverse","content":"Description# Causes Zumi to gradually accelerate in reverse to max speed during a given duration before decelerating back to zero. Syntax# smooth_reverse(duration) smooth_reverse(duration, rate=1) Parameters# duration: Total duration of drive command including acceleration and deceleration rate: rate at which speed changes. Default to 1 Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_reverse(3) time.sleep(1) zumi.smooth_reverse(duration=3,rate=2) Copy","keywords":""},{"title":"smooth_turn_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/smooth-turn-left","content":"Description# Turns left gradually to reach the desired angle while also going forward. Default to 90 degrees. Syntax# smooth_turn_left() smooth_turn_left(desired_angle=90,speed=20,step=2) Parameters# desired_angle: Degrees you want to turn from your starting position speed: Positive integer value for speed between 0 and 80. Default to 20. step: The angle step size (decrease for wider turns, increase for tighter turns) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_turn_left() time.sleep(1) zumi.smooth_turn_left(speed=30) Copy","keywords":""},{"title":"smooth_turn_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/smooth-turn-right","content":"Description# Turns right gradually to reach the desired angle while also going forward. Default to 90 degrees. Syntax# smooth_turn_right() smooth_turn_right(desired_angle=90,speed=20,step=2) Parameters# desired_angle: Degrees you want to turn from your starting position speed: Positive integer value for speed between 0 and 80. Default to 20. step: The angle step size (decrease for wider turns, increase for tighter turns) Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.smooth_turn_right() time.sleep(1) zumi.smooth_turn_right(speed=30) Copy","keywords":""},{"title":"speed_calibration()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/speed-calibration","content":"Description# In order to use this method you will need a speed calibration sheet (Click here for a PDF version). Zumi will drive over 5 horizontal white lines that are 2 centimeters wide. The slope and y_intercept will be generated for the best fit line of the speed prediction. These values will be saved to the Zumi as a text file. This function is necessary for move_to_coordinate(), move_inches(), and move_centimeters(). Syntax# speed_calibration() speed_calibration(speed=40, ir_threshold=100, time_out=3, cm_per_brick=2, show_graphs=False) Parameters# speed: Integer value that goes from (0 - 80). The lower the more accurate the speed prediction. ir_threshold: Integer value for the bottom left IR threshold (0-255). time_out: The number of seconds before the timeout. cm_per_brick: The width of each road marker in centimeters. show_graphs: Boolean default to False. If set to True, a graph will be displayed with the best fit line prediction. *Note: You may need to run this function twice to see the graph. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() # Place Zumi on the black portion of the speed calibration sheet zumi.speed_calibration() # To show the graphs, replace the original \"zumi.speed_calibration\" with the following line # zumi.speed_calibration(show_graphs = True) Copy","keywords":""},{"title":"square()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/square","content":"Description# Drives Zumi in a square. Default to counterclockwise. Syntax# square() square(speed=40, seconds=1, direction=1) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side direction: -1 for clockwise and +1 for counterclockwise Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square(seconds=1.0) time.sleep(1) zumi.square(speed=60,seconds=1.2) Copy","keywords":""},{"title":"square_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/square-left","content":"Description# Drives Zumi in a counterclockwise square. Syntax# square_left() square_left(speed=40, seconds=1.0) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square_left(seconds=1.5) Copy","keywords":""},{"title":"square_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/square-right","content":"Description# Drives Zumi in a clockwise square. Syntax# square_right() square_right(speed=40, seconds=1.0) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.square_right(seconds=1.5) Copy","keywords":""},{"title":"stop()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/stop","content":"Description# Stops Zumi's motors immediately. Syntax# stop() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,30): zumi.go_straight(30,0) zumi.stop() Copy","keywords":""},{"title":"triangle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/triangle","content":"Description# Drives Zumi in a triangle. Default is counterclockwise. Syntax# triangle() triangle(speed=40, seconds=1.5, direction=1) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side direction: -1 for clockwise and +1 for counterclockwise Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle(speed=30, direction=-1) Copy","keywords":""},{"title":"triangle_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/triangle-left","content":"Description# Drives Zumi in a counterclockwise triangle. Syntax# triangle_left() triangle_left(speed=40, seconds=1.5) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle_left(speed=30) Copy","keywords":""},{"title":"triangle_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/triangle-right","content":"Description# Drives Zumi in a clockwise triangle. Syntax# triangle_right() triangle_right(speed=40, seconds=1.5) Parameters# speed: Drive speed between 0-80 seconds: Duration in seconds Zumi drives for each side Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.triangle_right(speed=30) Copy","keywords":""},{"title":"turn()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/turn","content":"Description# Zumi will turn to a desired angle. Syntax# turn(desired_angle) turn(desired_angle, duration=1.5, max_speed=25, accuracy=1): Parameters# desired_angle: Angle to turn. Positive degrees to the left. Negative degrees to the right. duration: Number of seconds Zumi will perform the command. speed: The max motor speed for turning. A positive integer value between 0 and 80. accuracy: The tolerance of +- degrees.Ex: an accuracy = 1 will be +1 or -1 degree off from desired_angle. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() # zumi will turn to the left zumi.turn(90) #zumi will turn to the right 90 degrees from the starting angle zumi.turn(-90) Copy","keywords":""},{"title":"turn_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/turn-left","content":"Description# Causes Zumi to turn left the specified number of degrees. Default to 90 degrees. Syntax# turn_left() turn_left(desired_angle=90, duration=1.0) Parameters# desired_angle: Degrees you want to turn to the left from your starting position. Default to 90. Only positive values. duration: The amount of time in seconds Zumi will try and complete the turn. Increase for turns greater than 90 degrees. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.turn_left() time.sleep(1) zumi.turn_left(130,1.5) Copy","keywords":""},{"title":"turn_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Driving/turn-right","content":"Description# Causes Zumi to turn right the specified number of degrees. Default to 90 degrees. Syntax# turn_right() turn_right(desired_angle=90,duration=1.0) Parameters# desired_angle: Degrees you want to turn to the right from your starting position. Default to 90. Only positive values. duration: The amount of time in seconds Zumi will try and complete the turn. Increase for turns greater than 90 degrees. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.turn_right(45) time.sleep(1) zumi.turn_right(200,duration=1.3) Copy","keywords":""},{"title":"all_lights_off()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/all-lights-off","content":"Description# Turns all LEDs off Syntax# all_lights_off() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.all_lights_on() time.sleep(2) zumi.all_lights_off() Copy","keywords":""},{"title":"all_lights_on()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/all-lights-on","content":"Description# Turns all LEDs on the 2 front white leds and the rear 2 leds. Syntax# all_lights_on() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.all_lights_on() Copy","keywords":""},{"title":"brake_lights_off()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/break-lights-off","content":"Description# Turns off front LEDs only Syntax# brake_lights_off() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.brake_lights_on() time.sleep(2) zumi.brake_lights_off() Copy","keywords":""},{"title":"brake_lights_on()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/break-lights-on","content":"Description# Turns on back LEDs only Syntax# brake_lights_on() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.brake_lights_on() Copy","keywords":""},{"title":"hazard_lights_on()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/hazar-lights-on","content":"Description# Flashes both front and back LEDs Syntax# hazard_lights_on() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.hazard_lights_on() Copy","keywords":""},{"title":"hazard_lights_off()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/hazard-lights-off","content":"Description# Turns off flashing front and back LEDs Syntax# hazard_lights_off() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.hazard_lights_on() time.sleep(2) zumi.hazard_lights_off() Copy","keywords":""},{"title":"headlights_on()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/headlghts-on","content":"Description# Turns on front LEDs only Syntax# headlights_on() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.headlights_on() time.sleep(2) zumi.all_lights_off() Copy","keywords":""},{"title":"headlights_off()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/headlights-off","content":"Description# Turns off front LEDs only Syntax# headlights_off() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.headlights_on() time.sleep(2) zumi.headlights_off() Copy","keywords":""},{"title":"signal_left_off()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/signal-left-off","content":"Description# Turns off flashing both left front and left back LEDs Syntax# signal_left_off() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.signal_left_on() time.sleep(2) zumi.signal_left_off() Copy","keywords":""},{"title":"play_note()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/play-note","content":"Description# Play a note, from C2 - B6. Syntax# play_note(note_type) play_note(note_type, note_duration=500) Parameters# note_type: Integer from 0 to 60 or enum from Note class. Setting the note to 0 will result in no sound. note_duration: Default to 500 milliseconds but can be an integer from 0 to 2500 milliseconds. Must be in 100 millisecond increments ex. 100, 200, 500, 2000. If 0 note will play forever. class Note: C2 = 1 CS2 = 2 D2 = 3 DS2 = 4 E2 = 5 F2 = 6 FS2 = 7 G2 = 8 GS2 = 9 A2 = 10 AS2 = 11 B2 = 12 C3 = 13 CS3 = 14 D3 = 15 DS3 = 16 E3 = 17 F3 = 18 FS3 = 19 G3 = 20 GS3 = 21 A3 = 22 AS3 = 23 B3 = 24 C4 = 25 CS4 = 26 D4 = 27 DS4 = 28 E4 = 29 F4 = 30 FS4 = 31 G4 = 32 GS4 = 33 A4 = 34 AS4 = 35 B4 = 36 C5 = 37 CS5 = 38 D5 = 39 DS5 = 40 E5 = 41 F5 = 42 FS5 = 43 G5 = 44 GS5 = 45 A5 = 46 AS5 = 47 B5 = 48 C6 = 49 CS6 = 50 D6 = 51 DS6 = 52 E6 = 53 F6 = 54 FS6 = 55 G6 = 56 GS6 = 57 A6 = 58 AS6 = 59 B6 = 60 Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.protocol import Note import time zumi = Zumi() zumi.play_note(30,500) time.sleep(1) zumi.play_note(Note.C4) time.sleep(1) # will stop the buzzer zumi.play_note(0,0) Copy","keywords":""},{"title":"signal_left_on()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/signal-left-on","content":"Description# Flashes both left front and left back LEDs Syntax# signal_left_on() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.signal_left_on() Copy","keywords":""},{"title":"signal_right_off()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/signal-right-off","content":"Description# Turns off flashing both right front and right back LEDs Syntax# signal_right_off() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() zumi.signal_right_on() time.sleep(2) zumi.signal_right_off() Copy","keywords":""},{"title":"signal_right_on()","type":0,"sectionRef":"#","url":"docs/zumi/python/LEDs-and-buzzer/signal-right-on","content":"Description# Flashes both right front and right back LEDs Syntax# signal_right_on() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.signal_right_on() Copy","keywords":""},{"title":"calibrate_gyro()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/calibrate-gyro","content":"Description# Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. This function calls zumi.mpu.calibrate_MPU(). Syntax# calibrate_gyro() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(\"Done\") Copy","keywords":""},{"title":"calibrate_MPU()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/calibrate-mpu","content":"Description# Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. Syntax# calibrate_MPU() calibrate_MPU(count=100) Parameters# count: the number of samples you want Zumi to take. Increase to improve accuracy. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() #Zumi will take 500 samples/readings zumi.mpu.calibrate_MPU(count=500) #this is the order the offsets will be printed print(\"angular speed rad/sec Gx,Gy,Gz\") print(\"linear acceleration Ax,Ay,Az\") #print the offsets of each Axis zumi.mpu.print_offsets() Copy","keywords":""},{"title":"get_orientation()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/get-orientation","content":"Description# Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity). Syntax# get_orientation() Parameters# None Returns# Integer denoting orientation state. Orientation state -1 = unknown 0 = probably falling or moving between states 1 = camera straight up 2 = camera facing down 3 = on right side 4 = on left side 5 = wheels on floor 6 = wheels facing up (upside down) 7 = accelerating faster than 1g Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i inrange(20): orientation = zumi.get_orientation() print(orientation) time.sleep(0.5) print(\" done \") Copy","keywords":""},{"title":"read_x_angle()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/read-x-angle","content":"Description# Calls update_angles() and returns only the x-angle. Syntax# read_x_angle() Parameters# None Returns# float: current x-angle Example Code# Python# #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_x_angle()) IPython.display.clear_output(wait=True) print(\"done\") Copy","keywords":""},{"title":"read_y_angle()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/read-y-angle","content":"Description# Calls update_angles() and returns only the y-angle. Syntax# read_y_angle() Parameters# None Returns# float: current y-angle Example Code# Python# #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(\"done\") Copy","keywords":""},{"title":"read_z_angle()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/read-z-angle","content":"Description# Calls update_angles() and returns only the z-angle. Syntax# read_z_angle() Parameters# None Returns# float: current z-angle Example Code# Python# #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_z_angle()) IPython.display.clear_output(wait=True) print(\"done\") Copy","keywords":""},{"title":"reset_drive()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/reset-drive","content":"Description# Calls both reset_PID() and reset_gyro(). Use for driving straight or turning accurately. Syntax# reset_drive() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,50): zumi.forward_step(0,50) print(zumi.angle_list[2],\", \", zumi.error_past) zumi.stop() zumi.reset_drive() print(\" Now \") print(zumi.angle_list[2],\", \", zumi.error_past) Copy","keywords":""},{"title":"reset_gyro()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/reset-gryo","content":"Description# Resets all values in the angle list to 0. Use for driving straight or turning accurately. Syntax# reset_gyro() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() print(\"z angle \", zumi.angle_list[2]) zumi.turn_left(90,1.2) print(\"z angle \", zumi.angle_list[2]) zumi.reset_gyro() print(\"z angle \", zumi.angle_list[2]) Copy","keywords":""},{"title":"update_angles()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/update-angles","content":"Description# Reads angular speeds and updates the list of angles: The first 3 are angles produced from the gyroscope readings. X angle, Y angle and Z angle in degrees. The next 2 angles are produced by finding the tilt with respect to gravity. X and Y acceleration angles in degrees. Work well if Zumi's wheels point to the floor The next 2 angles are the complementary filtered angles are produced by combining both gyroscope and accelerometer angles for the x and y axis. The next 3 are the rotation angles which are produced using the accelerometer. rotation along X, Y and Z with respect to gravity. The last one is the tilt state. Syntax# update_angles() Parameters# None Returns# List [Gyro x,Gyro y,Gyro z,Acc x,Acc y,Comp x,Comp y,Rot_x,Rot_y,Rot_z,tilt_state] Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): angles = zumi.update_angles() z_angle = angles[2] print(z_angle) print(\" done \") Copy","keywords":""},{"title":"reset_PID()","type":0,"sectionRef":"#","url":"docs/zumi/python/MPU/reset-pid","content":"Description# Resets the sum of the gyro error to zero as well as the PID error sum. Use for driving straight or turning accurately. This does not reset the P, I, and D values of the Zumi PID control. Syntax# reset_PID() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,50): zumi.go_straight(50,0) #print the error of the z angle along with some of the PID accumulators print(zumi.PID_time_past,\", \", zumi.error_past,\", \", zumi.error_sum,\" , \", zumi.angle_list[2]) zumi.stop() #this will reset those values zumi.reset_PID() print(\" Now \") print(zumi.PID_time_past,\", \", zumi.error_past,\", \", zumi.error_sum,\" , \", zumi.angle_list[2]) Copy","keywords":""},{"title":"angry()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/angry-personality","content":"Description# makes zumi get angry. Syntax# angry() Parameters# Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.angry() Copy","keywords":""},{"title":"awake()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/awake","content":"Description# Makes Zumi open her eyes with the wake up sound Syntax# awake() Parameters# None Returns# Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.awake() Copy","keywords":""},{"title":"celebrate()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/celebrte","content":"Description# makes zumi celebrate. Syntax# celebrate() Parameters# Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.celebrate() Copy","keywords":""},{"title":"disoriented_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/disoriented-left","content":"Description# makes zumi look to the left and play disoriented sound Syntax# disoriented_left() Parameters# None Returns# Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.disoriented_left() Copy","keywords":""},{"title":"disoriented_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/disoriented-right","content":"Description# makes zumi look to the left and play disoriented sound Syntax# disoriented_right() Parameters# None Returns# Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.disoriented_right() Copy","keywords":""},{"title":"happy()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/happy","content":"Description# makes zumi have a happy personality. Syntax# happy() Parameters# Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.happy() Copy","keywords":""},{"title":"look_around()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/look-around","content":"Description# makes zumi look around Syntax# look_around() Parameters# Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around() Copy","keywords":""},{"title":"look_around_open()","type":0,"sectionRef":"#","url":"docs/zumi/python/Personality/look-around-open","content":"Description# makes zumi look around with wide open eyes Syntax# look_around_open() Parameters# Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around_open() Copy","keywords":""},{"title":"angry()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/angry","content":"Description# Draws Zumi's angry eyes on the screen. Syntax# angry() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.angry() Copy","keywords":""},{"title":"blink()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/blink","content":"Description# Draws Zumi's blinking animation on the screen. Syntax# blink() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.blink() Copy","keywords":""},{"title":"clear_display()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/clear-display","content":"Description# Clears everything on the OLED by drawing a black rectangle. Syntax# clear_display() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.print(\"Hello\") screen.clear_display() Copy","keywords":""},{"title":"clear_drawing()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/clear-drawing","content":"Description# Clears the drawing canvas object without clearing the OLED screen. Use this before using any new draw functions. Syntax# clear_drawing() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_circle(30,30,10) time.sleep(1) screen.clear_drawing() screen.print(\"Hello\") Copy","keywords":""},{"title":"clock()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/clock","content":"Descriptionx# Clears the screen and draws a clock with the given hour and minute set by the user. Syntax# clock(hour, minute) clock(hour, minute, string='', font_size=18) Parameters# hour: Integer for the hour minute: Integer for the minute string: an 8 character String to be displayed under the clock (optional). Defaults to an empty string. font_size: the font-size of the time Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.clock(3,15,\"Monday\") Copy","keywords":""},{"title":"close_eyes()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/close-eyes","content":"Description# Draws Zumi's closed eyes on the screen. Syntax# close_eyes() Parameters# Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.close_eyes() Copy","keywords":""},{"title":"draw_arc()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-arc","content":"Description# Draws an arc within the boundaries of points x1,y1, and x2,y2 at the specified starting and ending angles. Syntax# draw_arc(x1, y1, x2, y2, start_ang, end_ang) draw_arc(x1, y1, x2, y2, start_ang, end_ang,fill_in=True) Parameters# x1: x coordinate of top-left corner for the rectangle enclosing the arc y1: y coordinate of top-left corner for the rectangle enclosing the arc x2: x coordinate of bottom-right corner for the rectangle enclosing the arc y2: y coordinate of bottom-right corner for the rectangle enclosing the arc start_ang: starting arc angle end_ang: ending arc angle fill_in: Boolean that selects if the triangle will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_arc(0,0,50,50,-180,0) Copy","keywords":""},{"title":"draw_chord()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-chord","content":"Description# Draws a chord within the boundaries of points x1,y1, and x2,y2 at the specified starting and ending angles. Syntax# draw_chord(x1, y1, x2, y2, start_ang, end_ang) draw_chord(x1, y1, x2, y2, start_ang, end_ang,fill_in=True) Parameters# x1: x coordinate of top-left corner for the rectangle enclosing the chord y1: y coordinate of top-left corner for the rectangle enclosing the chord x2: x coordinate of bottom-right corner for the rectangle enclosing the chord y2: y coordinate of bottom-right corner for the rectangle enclosing the chord start_ang: starting angle end_ang: ending angle fill_in: Boolean that selects if the triangle will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_chord(0,0,20,20,-180,0) screen.draw_chord(30,30,50,50,-180,0) #do a 360 from -180 degrees to 180 degrees screen.draw_chord(60,30,100,50,-180,180) Copy","keywords":""},{"title":"draw_circle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-circle","content":"Description# Draws a circle that fits inside a square with its top-left corner at x,y and a width/height of the circle's diameter. Syntax# draw_circle(x, y, diameter) draw_circle(x, y, diameter, fill_in=True) Parameters# x: x coordinate of the top-left corner of the enclosing square y: y coordinate of the top-left corner of the enclosing square diameter: diameter of the circle (also the width and height of enclosing square) fill_in: Boolean that selects if the triangle will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_circle(10,0,20,fill_in=False) Copy","keywords":""},{"title":"draw_ellipse()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-elipse","content":"Description# Draws an ellipse that fits in a rectangle with its top-left corner at x,y and a set width and height. Syntax# draw_ellipse(self, x, y, width, height) draw_ellipse(self, x, y, width, height, fill_in=True) Parameters# x: x coordinate of the top-left corner of the enclosing rectangle y: y coordinate of the top-left corner of the enclosing rectangle width: width of enclosing rectangle height: height of enclosing rectangle fill_in: Boolean that selects if the triangle will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_ellipse(0,0,100,30,fill_in=True) Copy","keywords":""},{"title":"draw_image()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-image","content":"Description# draws the image on the screen. Syntax# draw_image(img) Parameters# img Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() path =\"/usr/local/lib/python3.5/dist-packages/zumi/util/images/happy1.ppm\" screen.draw_image(screen.path_to_image(path)) Copy","keywords":""},{"title":"draw_line()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-line","content":"Description# Draws a line between points (x1,y1) and (x2,y2). Syntax# draw_line(x1, y1, x2, y2) draw_line(x1, y1, x2, y2, thickness=1,fill_in=True) Parameters# x1: x coordinate of the starting point y1: y coordinate of the starting point x2: x coordinate of the ending point y2: y coordinate of the ending point thickness: pixel width of the line fill_in: Boolean that selects if the line will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_line(0,0,40,40,fill_in=True) screen.draw_line(40,0,0,40,thickness=10,fill_in=True) Copy","keywords":""},{"title":"draw_point()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-point","content":"Description# Draws a single pixel at the set x and y coordinate. Syntax# draw_point(x, y) draw_point(x, y,fill_in=True) Parameters# x: the x coordinate y: the y coordinate fill_in: Boolean that selects if the point will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_point(100,30) Copy","keywords":""},{"title":"draw_polygon()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-polygon","content":"Description# Draws lines between points in a given list [(x1,y1),...,(xn,yn)] to form a shape. Syntax# draw_polygon(points_list) draw_polygon(points_list,fill_in = True): Parameters# points_list: A list [x1,y1,x2,y2,....xn,yn] with at least 3 points fill_in: Boolean that selects if the polygon will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() points =[(30,50),(90,10),(20,10),(5,20)] screen.draw_polygon(points) Copy","keywords":""},{"title":"draw_rect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-rect","content":"Description# Draws a rectangle on the screen. Syntax# draw_rect(x, y, width, height) draw_rect(x, y, width, height, thickness=1, fill_in=False) Parameters# x: the top left corner x coordinate y: the top left corner y coordinate width: width of rectangle height: height of rectangle thickness: thickness of rectangle border, default to 1 fill_in: Boolean that selects if the shape will be filled in. Default to False. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_rect(0,0,128,64,thickness=1,fill_in=True) Copy","keywords":""},{"title":"draw_square()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-square","content":"Description# Draws a square on the screen. Syntax# draw_square(x, y, width) draw_square(x, y, width, thickness=1, fill_in=False) Parameters# x: the top left corner x coordinate y: the top left corner y coordinate width: width of each side thickness: thickness of rectangle border, default to 1 fill_in: Boolean that selects if the shape will be filled in. Default to False. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_square(0,0,30,thickness=1,fill_in=True) Copy","keywords":""},{"title":"draw_text()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-text","content":"Description# Draws text to the upper lefthand corner of the screen Syntax# draw_text(string) draw_text(string, x, y, font_size) (display, clear).. Parameters# string (type: string) : The string that zumi will show on the screen x (type: integer, default: 1) : The x coordinate start value of the string y (type: integer, default: 1) : The y coordinate start value of the string font_size (type: integer, default: 16) : The font size of the string Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() for i inrange(10): screen.draw_text(str(i)+'!') time.sleep(0.1) screen.clear_display() Copy","keywords":""},{"title":"draw_text_center()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-text-center","content":"Description# Draws text to the center of the screen Syntax# draw_text_center(string, font_size=16) draw_text_center(string) draw_text_center(string, font_size) Parameters# string\\ font_size Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.draw_text_center('hello',font_size=10) time.sleep(0.5) screen.draw_text_center('hello',font_size=20) time.sleep(0.5) screen.draw_text_center('hello',font_size=30) time.sleep(0.5) screen.draw_text_center('hello',font_size=40) time.sleep(0.5) screen.draw_text_center('hello',font_size=50) time.sleep(0.5) Copy","keywords":""},{"title":"draw_triangle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/draw-triangle","content":"Description# Draws a triangle with 3 points (x1,y1), (x2,y2), (x3,y3): x1, y1, x2, y2, x3, y3. Syntax# draw_triangle(x1,y1,x2,y2,x3,y3) draw_triangle(x1,y1,x2,y2,x3,y3,fill_in=True): Parameters# x1: the x coordinate of point 1 y1: the y coordinate of point 1 x2: the x coordinate of point 2 y2: the y coordinate of point 2 x3: the x coordinate of point 3 y3: the y coordinate of point 3 fill_in: Boolean that selects if the triangle will be filled in (white). Default to True. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen=Screen() screen.draw_triangle(0,10,20,50,50,0) Copy","keywords":""},{"title":"glimmer()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/glimmer","content":"Description# Draws an animation of Zumi's eyes glimmering on the screen. Syntax# glimmer() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.glimmer() Copy","keywords":""},{"title":"hello()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/hello","content":"Description# Draws Zumi's default eyes on the screen. Syntax# hello Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.hello() Copy","keywords":""},{"title":"happy()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/happy","content":"Description# Draws an animation of Zumi's happy eyes. Syntax# happy() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.happy() Copy","keywords":""},{"title":"look_around()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/look-around","content":"Description# makes zumi look around Syntax# look_around() Parameters# Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi from zumi.util.screen import Screen from zumi.personality import Personality zumi = Zumi() screen = Screen() personality = Personality(zumi, screen) personality.look_around() Copy","keywords":""},{"title":"look_around_open()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/look-around-open","content":"Description# Draws Zumi's eyes looking around left and right on the screen. Syntax# look_around_open() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.look_around_open() Copy","keywords":""},{"title":"print()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/print","content":"Description# Prints any number of Strings on the screen. Syntax# print(*messages) print(*messages,x=0, y=0, fill_in=True,font_size=12) Parameters# messages: Any number of Strings that will print to the screen x: x coordinate of the String. Default to 0. y: y coordinate of the String. Default to 0. fill_in: Boolean that selects if text will be white(True) or black(False). Default to True. font_size: Pixel size of the font. Default to 12. Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen import time screen=Screen() screen.print(\"12345678\") screen.print(\"hello\", y=15) screen.print(\"\\n\\n\",\"Zumi\") time.sleep(1) screen.clear_drawing() screen.print(\"ZUMI\",font_size=20) Copy","keywords":""},{"title":"sad()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/sad","content":"Description# Draws Zumi's sad eyes on the screen. Syntax# sad() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.sad() Copy","keywords":""},{"title":"sleeping()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/sleeping","content":"Description# Draws an animation of Zumi sleeping on the screen. Syntax# sleeping() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.sleeping() Copy","keywords":""},{"title":"sleepy_eyes()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/sleepy-eyes","content":"Draws Zumi's sleepy eyes on the screen. Syntax# sleepy_eyes() Parameters# None Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_eyes() Copy","keywords":""},{"title":"sleepy_left()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/sleepy-left","content":"Description# draws a sleepy left eye on the screen. Syntax# sleepy_left() Parameters# Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_left() Copy","keywords":""},{"title":"sleepy_right()","type":0,"sectionRef":"#","url":"docs/zumi/python/Screen/sleepy-right","content":"Description# draws a sleepy right eye on the screen Syntax# sleepy_right() Parameters# Returns# None Example Code# Python# #Python code from zumi.util.screen import Screen screen = Screen() screen.sleepy_right() Copy","keywords":""},{"title":"back_left_detect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/back-left-detect","content":"Description# Returns True if the back left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases. Syntax# back_left_detect() back_left_detect(threshold=100) Parameters# threshold: Integer between 0-255 Returns# Boolean that returns True if sensor is triggered. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): if zumi.back_left_detect(): print(\"Detected!) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"back_right_detect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/back-right-detect","content":"Description# Returns True if the back right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases. Syntax# back_right_detect() back_right_detect(threshold=100) Parameters# threshold: Integer between 0-255 Returns# Boolean that returns True if sensor is triggered. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): if zumi.back_right_detect(): print(\"Detected!) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"bottom_left_detect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/bottom-left-detect","content":"Description# Returns True if the bottom left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases. Syntax# bottom_left_detect() bottom_left_detect(threshold=100) Parameters# threshold: Integer between 0-255 Returns# Boolean that returns True if sensor is triggered. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): if zumi.bottom_left_detect(): print(\"Detected!) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"bottom_right_detect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/bottom-right-detect","content":"Description# Returns True if the bottom right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases. Syntax# bottom_right_detect() bottom_right_detect(threshold=100) Parameters# threshold: Integer between 0-255 Returns# Boolean that returns True if sensor is triggered. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): if zumi.bottom_right_detect(): print(\"Detected!) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"calibrate_MPU()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/calibrate-MPU","content":"Description# Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. Syntax# calibrate_MPU() calibrate_MPU(count=100) Parameters# count: the number of samples you want Zumi to take. Increase to improve accuracy. Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() #Zumi will take 500 samples/readings zumi.mpu.calibrate_MPU(count=500) #this is the order the offsets will be printed print(\"angular speed rad/sec Gx,Gy,Gz\") print(\"linear acceleration Ax,Ay,Az\") #print the offsets of each Axis zumi.mpu.print_offsets() Copy","keywords":""},{"title":"calibrate_gyro()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/calibrate-gyro","content":"Description# Reads from the previous MPU offsets file unless the file does not exist. If an offsets file does not exist, then it will create an offsets file by taking the average of multiple readings from the sensor. While running this function, make sure Zumi is not moving and is resting on a flat surface. This function calls zumi.mpu.calibrate_MPU(). Syntax# calibrate_gyro() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() zumi.calibrate_gyro() print(\"Done\") Copy","keywords":""},{"title":"front_left_detect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/front-left-detect","content":"Description# Returns True if the front left IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases. Syntax# front_left_detect() front_left_detect(threshold=100) Parameters# threshold: Integer between 0-255 Returns# Boolean that returns True if sensor is triggered. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): if zumi.front_left_detect(): print(\"Detected!) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"front_right_detect()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/front-right-detect","content":"Description# Returns True if the front right IR sensor detects a value below a threshold. The value decreases as the light reflected back to the receiver increases. Syntax# front_left_detect() front_left_detect(threshold=100) Parameters# threshold: Integer between 0-255 Returns# Boolean that returns True if sensor is triggered. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): if zumi.front_right_detect(): print(\"Detected!) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"get_all_IR_data()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/get-all-ir-data","content":"Description# Returns the readings from all 6 IR sensors. Syntax# get_all_IR_data() Parameters# None Returns# List with 6 values between 0 and 255. IR sensor indices: 0 Front right sensor 1 Bottom right sensor 2 Back right sensor 3 Bottom left sensor 4 Back left sensor 5 Front left sensor Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): ir_readings = zumi.get_all_IR_data() print(ir_readings) time.sleep(0.1)# Delay for I2C Copy","keywords":""},{"title":"get_battery_voltage()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/get-battery-voltage","content":"Description# Get the reading from battery level. If you are charging Zumi RED LED ON you will see roughly 1.1-1.20 volts. The battery should reach a max of 4.20 volts and the lowest it should ever reach is 3.0 volts. These values will only show up if the switch is in the on position and the RED led is not visible. Syntax# get_battery_voltage() Parameters# None Returns# Voltage reading Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,10): # battery level is updated every 500ms or half a second time.sleep(0.5) battery = zumi.get_battery_voltage() print(battery) Copy","keywords":""},{"title":"get_IR_data()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/get-ir-data","content":"Description# Get the reading from the IR sensors and the index specified. Syntax# get_IR_data(ir_sensor_index) Parameters# ir_sensor_index: Integer from 0 to 5. IR sensor indices: 0 IR.FRONT_RIGHT = Front right sensor1 IR.BOTTOM_RIGHT = Bottom right sensor2 IR.BACK_RIGHT = Back right sensor3 IR.BOTTOM_LEFT = Bottom left sensor4 IR.BACK_LEFT = Back left sensor5 IR.FRONT_LEFT = Front left sensor Returns# Value between 0 and 255. Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): FRONT_RIGHT =0 ir_reading = zumi.get_IR_data(FRONT_RIGHT) zumi.play_note(int(ir_reading/4),20) # Divide by 4 because note is between 0 and 60 time.sleep(0.05) Copy","keywords":""},{"title":"get_orientation()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/get-orientation","content":"Description# Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity). Syntax# get_orientation() Parameters# None Returns# Integer denoting orientation state. Orientation state -1 = unknown 0 = probably falling or moving between states 1 = camera straight up 2 = camera facing down 3 = on right side 4 = on left side 5 = wheels on floor 6 = wheels facing up (upside down) 7 = accelerating faster than 1g Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i inrange(20): orientation = zumi.get_orientation() print(orientation) time.sleep(0.5) print(\" done \") Copy","keywords":""},{"title":"get_orientation_message()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/get-orientation-message","content":"Description# Uses the acceleration values to find Zumi's orientation with respect to the strongest force being applied to Zumi (gravity). This function returns the orientation as a String. Syntax# get_orientation_message() Parameters# None Returns# String: a description of the orientation state Orientation state \"unknown\" \"face up\" \"face down\" \"right side down\" \"left side down\" \"upright\" \"upside down\" \"accelerating\" Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() #grab zumi and place it on any side #example: upside down, on its nose etc. for i in range(20): orientation = zumi.get_orientation_message() print(orientation) time.sleep(0.5) print(\" done \") Copy","keywords":""},{"title":"read_x_angle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/read-x-angle","content":"Description# Calls update_angles() and returns only the y-angle. Syntax# read_y_angle() Parameters# None Returns# float: current y-angle Example Code# Python# #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(\"done\") Copy","keywords":""},{"title":"read_y_angle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/read-y-angle","content":"Description# Calls update_angles() and returns only the y-angle. Syntax# read_y_angle() Parameters# None Returns# float: current y-angle Example Code# Python# #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_y_angle()) IPython.display.clear_output(wait=True) print(\"done\") Copy","keywords":""},{"title":"read_z_angle()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/read-z-angle","content":"Description# Calls update_angles() and returns only the z-angle. Syntax# read_z_angle() Parameters# None Returns# float: current z-angle Example Code# Python# #Python code from zumi.zumi import Zumi import IPython.display zumi = Zumi() for i in range(100): print(zumi.read_z_angle()) IPython.display.clear_output(wait=True) print(\"done\") Copy","keywords":""},{"title":"reset_gyro()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/reset-gyro","content":"Description# Resets all values in the angle list to 0. Use for driving straight or turning accurately. Syntax# reset_gyro() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() print(\"z angle \", zumi.angle_list[2]) zumi.turn_left(90,1.2) print(\"z angle \", zumi.angle_list[2]) zumi.reset_gyro() print(\"z angle \", zumi.angle_list[2]) Copy","keywords":""},{"title":"reset_drive()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/reset-drive","content":"Description# Calls both reset_PID() and reset_gyro(). Use for driving straight or turning accurately. Syntax# reset_drive() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,50): zumi.forward_step(0,50) print(zumi.angle_list[2],\", \", zumi.error_past) zumi.stop() zumi.reset_drive() print(\" Now \") print(zumi.angle_list[2],\", \", zumi.error_past) Copy","keywords":""},{"title":"reset_PID()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/reset-PID","content":"Description# Resets the sum of the gyro error to zero as well as the PID error sum. Use for driving straight or turning accurately. This does not reset the P, I, and D values of the Zumi PID control. Syntax# reset_PID() Parameters# None Returns# None Example Code# Python# #Python code from zumi.zumi import Zumi zumi = Zumi() for i inrange(0,50): zumi.go_straight(50,0) #print the error of the z angle along with some of the PID accumulators print(zumi.PID_time_past,\", \", zumi.error_past,\", \", zumi.error_sum,\" , \", zumi.angle_list[2]) zumi.stop() #this will reset those values zumi.reset_PID() print(\" Now \") print(zumi.PID_time_past,\", \", zumi.error_past,\", \", zumi.error_sum,\" , \", zumi.angle_list[2]) Copy","keywords":""},{"title":"update_angles()","type":0,"sectionRef":"#","url":"docs/zumi/python/Sensors/update-angles","content":"Description# Reads angular speeds and updates the list of angles: The first 3 are angles produced from the gyroscope readings. X angle, Y angle and Z angle in degrees. The next 2 angles are produced by finding the tilt with respect to gravity. X and Y acceleration angles in degrees. Work well if Zumi's wheels point to the floor The next 2 angles are the complementary filtered angles are produced by combining both gyroscope and accelerometer angles for the x and y axis. The next 3 are the rotation angles which are produced using the accelerometer. rotation along X, Y and Z with respect to gravity. The last one is the tilt state. Syntax# update_angles() Parameters# None Returns# List [Gyro x,Gyro y,Gyro z,Acc x,Acc y,Comp x,Comp y,Rot_x,Rot_y,Rot_z,tilt_state] Example Code# Python# #Python code from zumi.zumi import Zumi import time zumi = Zumi() for i inrange(0,100): angles = zumi.update_angles() z_angle = angles[2] print(z_angle) print(\" done \") Copy","keywords":""}]